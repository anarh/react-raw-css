(window["webpackJsonp@visa/vds-react"]=window["webpackJsonp@visa/vds-react"]||[]).push([[66],{246:function(e,a,n){"use strict";n.r(a);var t=n(96),r=n(513),l=n(0),o=n.n(l),c=n(4),s=n.n(c),i=n(516),h=n(514),u=n.n(h),p=n(37),d=n(8),m=n(504),f=n(16),y=n(23),g=n(17),v=n(505),b=n(60),w=n(132),E=n(506),S=n(507),T=n(508),x=n(509),N=n(510),C=n(7),O=n(2),B=n(135),k=n(540),I=n(142),R=n(5),j=function(e){var a=e.children,n=e.className,t=Object(R.a)(e,["children","className"]);return o.a.createElement("div",Object.assign({className:s()("vds-nav-action",n)},t),a)};j.displayName="NavAction";var P=j,L=function(e){var a=e.children,n=e.className,t=Object(R.a)(e,["children","className"]);return o.a.createElement("div",Object.assign({className:s()("vds-nav-action-info",n)},t),a)};L.displayName="NavActionInfo";var q=L,D=n(143),A=n(144),F=n(145),_=n(146),W=n(147),X=n(792),G=n(148),U=n(931),V=function(e){var a=e.children,n=e.className,t=Object(R.a)(e,["children","className"]);return o.a.createElement("div",Object.assign({className:s()("vds-search-button",n)},t),a)};V.displayName="SearchButton";var $=V,z=n(932),J=n(933);function H(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function K(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?H(n,!0).forEach((function(a){Object(O.a)(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):H(n).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}var M=function(){var e=Object(l.useRef)(),a=Object(l.useRef)(),n=Object(l.useState)({disableToggle:!1,expanded:!1,value:""}),r=Object(t.a)(n,2),c=r[0],s=r[1],i=Object(l.useState)({disableToggle:!1,expanded:!1,value:""}),h=Object(t.a)(i,2),u=h[0],p=h[1],m=Object(l.useState)({value:""}),v=Object(t.a)(m,2),E=v[0],S=v[1],T=Object(l.useState)({value:""}),x=Object(t.a)(T,2),N=x[0],O=x[1];return o.a.createElement(y.a,null,o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(C.a,{tag:"h2"},"Search Default"),o.a.createElement(C.a,null,"Standard search interaction provides search results after user has input their keyword search query and submit the action. While auto-suggest may help the user complete their input, search results are not displayed until users explicitly submit the search action."),o.a.createElement(C.a,null,"Note: Standard Search includes a button with the magnifying glass icon and the input field is 48px tall."))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(U.a,null,o.a.createElement($,null,o.a.createElement(B.a,{ariaLabel:"search",iconType:"light"},o.a.createElement(f.a,{name:"search",resolution:"low"}))),o.a.createElement(k.a,{autoComplete:"off",label:"Search",name:"q",placeholder:"Search",type:"search",useNativePlaceholder:!0})))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(C.a,{tag:"h2"},"Search Expandable (with state)"),o.a.createElement(C.a,null,"When the search feature is more of a secondary action and the allowed canvas real-estate is limited, the search magnifying glass icon can be used as an entry point to invoke a modal search box."),o.a.createElement(C.a,null,"Once users press the search icon, the text field will expand and be ready for input."),o.a.createElement(C.a,null,"After the field is expanded, if focus is removed from field before an entry is made, then the field will collapse to it\u2019s default state."),o.a.createElement(C.a,null,"Pressing the search icon while the field is expanded will check if the field contains entered text. If there is an entry then a search is performed, otherwise the field is collapsed to it\u2019s default state."))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(U.a,{container:!0,expandable:!0},o.a.createElement(k.a,{autoComplete:"off",expanded:c.expanded,label:"Search",name:"q",onBlur:function(){s(K({},c,{expanded:Boolean(c.value.length)})),setTimeout((function(){return s(K({},c,{disableToggle:!1,expanded:Boolean(c.value.length)}))}),300)},onChange:function(e){return s(K({},c,{value:e.target.value}))},placeholder:"Search",ref:e,type:"search",useNativePlaceholder:!0,value:c.value}),o.a.createElement($,null,o.a.createElement(B.a,{ariaLabel:"search",iconType:c.expanded?"light":void 0,onClick:function(){""===c.value&&!1===c.disableToggle&&(e.current.focus(),s(K({},c,{disableToggle:!0,expanded:!c.expanded})))}},o.a.createElement(f.a,{name:"search",resolution:"low"})))))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(C.a,{tag:"h2"},"Navigation Bar With Standard Expandable Search"),o.a.createElement(C.a,null,"Search feature as placed in the Navigation Bar will gather results from across the entire app experience. By default, it will use the expandable behavior with non-dynamic search behavior. This design of the text field input (no borders) is specific to Search on the Navigation Bar."),o.a.createElement(C.a,null,"Default"),o.a.createElement(C.a,null,"By default the user will only see the Search magnifying glass icon as part of the navigation bar. To invoke the search feature, the user will press on the icon button."),o.a.createElement(C.a,null,"After Expansion"),o.a.createElement(C.a,null,"Once the user presses on the Search magnifying glass, the search box will expand and place the focus on the text field, ready for users to type in their query."))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(I.a,{position:"relative"},o.a.createElement(y.a,null,o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(G.a,{href:"#content"},"Skip to main content"),o.a.createElement(D.a,null,o.a.createElement(A.a,null,o.a.createElement(B.a,{ariaLabel:"menu",iconType:"dark"},o.a.createElement(f.a,{name:"menu",resolution:"low"})),o.a.createElement(F.a,{href:"http://www.visa.com"},o.a.createElement(_.a,{alt:"Visa",src:"http://ux/projects/visa-ui-web/3.0.0-alpha.12/_logos/visa/visa_vbm_wht.svg"})))),o.a.createElement(X.a,null,o.a.createElement(W.a,{ariaLabel:"Site Navigation"},o.a.createElement(w.a,null,o.a.createElement(b.a,{tag:o.a.createElement("a",null),href:"http://www.visa.com"},"Contact"),o.a.createElement(b.a,{tag:o.a.createElement("a",null),href:"http://www.visa.com"},"Service"),o.a.createElement(b.a,{tag:o.a.createElement("a",null),href:"http://www.visa.com"},"Statistics")))),o.a.createElement(P,null,o.a.createElement(q,null,o.a.createElement(U.a,{expandable:!0,navbar:!0},o.a.createElement(k.a,{autoComplete:"off",expanded:u.expanded,label:"Search",name:"q",onBlur:function(){p(K({},u,{expanded:Boolean(u.value.length)})),setTimeout((function(){return p(K({},u,{disableToggle:!1,expanded:Boolean(u.value.length)}))}),300)},onChange:function(e){return p(K({},u,{value:e.target.value}))},placeholder:"Search",ref:a,type:"search",useNativePlaceholder:!0,value:u.value}),o.a.createElement($,null,o.a.createElement(B.a,{ariaLabel:"search",iconType:u.expanded?"light":"dark",onClick:function(){""===u.value&&!1===u.disableToggle&&(a.current.focus(),p(K({},u,{disableToggle:!0,expanded:!u.expanded})))}},o.a.createElement(f.a,{name:"search",resolution:"low"})))))))))))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(C.a,{tag:"h2"},"Dynamic Search"),o.a.createElement(C.a,null,"Dynamic search begins when the user starts typing in their query after invoking the search function. Users will see a list of auto-suggestions to help users find the proper query or related results. The search-as-you-type is often used in dedicated search experiences and often in mobile app experiences."),o.a.createElement(C.a,null,"Typing three or more characters presents the search assist menu."),o.a.createElement(C.a,null,'Note: Unlike Standard Search, Dynamic Search includes a "clear entry" button and not a Search button and the input field is 40px tall.'),o.a.createElement(C.a,null,"The clear button will show up if users entered a keyword entry."))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(U.a,{dynamic:!0},o.a.createElement(k.a,{autoComplete:"off",label:"Search",name:"q",onChange:function(e){return S({value:e.target.value})},placeholder:"Search",type:"search",useNativePlaceholder:!0,value:E.value}),o.a.createElement(J.a,null,o.a.createElement(f.a,{name:"search",resolution:"low"})),E.value.length?o.a.createElement(z.a,null,o.a.createElement(B.a,{ariaLabel:"clear entry",iconType:"light-tiny",onClick:function(){return S({value:""})}},o.a.createElement(f.a,{name:"clear",resolution:"tiny"}))):void 0))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(C.a,{tag:"h2"},"Contextual Search"),o.a.createElement(C.a,null,"As the search scope becomes more narrow and contextual, the placement of the search feature will be placed closer with the content that it will search. This will utilize the text field, hidden label variant. The search feature may run dynamically depending on the app architecture."),o.a.createElement(C.a,null,"Typing three or more characters presents the search assist menu."))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(U.a,{dynamic:!0},o.a.createElement(k.a,{autoComplete:"off",label:"Search",name:"q",onChange:function(e){return O({value:e.target.value})},placeholder:"Search news articles",type:"search",useNativePlaceholder:!0,value:N.value}),o.a.createElement(J.a,null,o.a.createElement(f.a,{name:"search",resolution:"low"})),N.value.length?o.a.createElement(z.a,null,o.a.createElement(B.a,{ariaLabel:"clear entry",iconType:"light-tiny",onClick:function(){return O({value:""})}},o.a.createElement(f.a,{name:"clear",resolution:"tiny"}))):void 0))))},Q=n(515),Y="import React, { forwardRef } from 'react';\nimport { bool, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-search';\n\nconst Search = forwardRef(({\n  children,\n  className,\n  container,\n  dynamic,\n  expandable,\n  navbar,\n  ...remainingProps\n}, ref) => (\n  <div\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_PREFIX}--container`]: Boolean(container),\n      [`${CSS_PREFIX}--dynamic`]: Boolean(dynamic),\n      [`${CSS_PREFIX}--expandable`]: Boolean(expandable),\n      [`${CSS_PREFIX}--nav-bar`]: Boolean(navbar)\n    }, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n));\n\nSearch.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Container Search bar\n   */\n  container: bool,\n\n  /**\n   * Dynamic Search bar\n   */\n  dynamic: bool,\n\n  /**\n   * Expandable Search bar\n   */\n  expandable: bool,\n\n  /**\n   * Navbar Search bar\n   */\n  navbar: bool\n};\n\nSearch.displayName = 'Search';\n\nexport default Search;\n".replace("= memo(({","= React.forwardRef(({").replace("cloneElement(","React.cloneElement("),Z='import React, { useRef, useState } from \'react\';\nimport ButtonIcon from \'../../button-icon\';\nimport Col from \'../../col\';\nimport Grid from \'../../grid\';\nimport Icon from \'../../icon\';\nimport Input from \'../../input\';\nimport Nav from \'../../nav\';\nimport NavAction from \'../../nav-action\';\nimport NavActionInfo from \'../../nav-action-info\';\nimport NavBrand from \'../../nav-brand\';\nimport NavBrandInfo from \'../../nav-brand-info\';\nimport NavBrandLogo from \'../../nav-brand-logo\';\nimport NavBrandLogoImage from \'../../nav-brand-logo-image\';\nimport NavLinks from \'../../nav-links\';\nimport NavSite from \'../../nav-site\';\nimport NavSkip from \'../../nav-skip\';\nimport Row from \'../../row\';\nimport Search from \'../../search\';\nimport SearchButton from \'../../search-button\';\nimport SearchClearButton from \'../../search-clear-button\';\nimport SearchIcon from \'../../search-icon\';\nimport Tab from \'../../tab\';\nimport TabList from \'../../tab-list\';\nimport Typography from \'../../typography\';\n\nconst SearchExample = () => {\n  const refOne = useRef();\n  const refTwo = useRef();\n\n  const [stateOne, setStateOne] = useState({\n    disableToggle: false,\n    expanded: false,\n    value: \'\'\n  });\n\n  const [stateTwo, setStateTwo] = useState({\n    disableToggle: false,\n    expanded: false,\n    value: \'\'\n  });\n\n  const [stateThree, setStateThree] = useState({\n    value: \'\'\n  });\n\n  const [stateFour, setStateFour] = useState({\n    value: \'\'\n  });\n\n  const handleClickOne = () => {\n    if (stateOne.value === \'\' && stateOne.disableToggle === false) {\n      refOne.current.focus();\n\n      setStateOne({\n        ...stateOne,\n        disableToggle: true,\n        expanded: !stateOne.expanded\n      });\n    }\n  };\n\n  const handleBlurOne = () => {\n    setStateOne({\n      ...stateOne,\n      expanded: Boolean(stateOne.value.length)\n    });\n\n    setTimeout(() => setStateOne({\n      ...stateOne,\n      disableToggle: false,\n      expanded: Boolean(stateOne.value.length)\n    }), 300);\n  };\n\n  const handleClickTwo = () => {\n    if (stateTwo.value === \'\' && stateTwo.disableToggle === false) {\n      refTwo.current.focus();\n\n      setStateTwo({\n        ...stateTwo,\n        disableToggle: true,\n        expanded: !stateTwo.expanded\n      });\n    }\n  };\n\n  const handleBlurTwo = () => {\n    setStateTwo({\n      ...stateTwo,\n      expanded: Boolean(stateTwo.value.length)\n    });\n\n    setTimeout(() => setStateTwo({\n      ...stateTwo,\n      disableToggle: false,\n      expanded: Boolean(stateTwo.value.length)\n    }), 300);\n  };\n  return (\n    <Grid>\n      <Row>\n        <Col>\n          <Typography tag="h2">Search Default</Typography>\n          <Typography>\n            Standard search interaction provides search results\n            after user has input their keyword search query and\n            submit the action. While auto-suggest may help the user\n            complete their input, search results are not displayed\n            until users explicitly submit the search action.\n          </Typography>\n          <Typography>\n            Note: Standard Search includes a button with the\n            magnifying glass icon and the input field is 48px tall.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Search>\n            <SearchButton>\n              <ButtonIcon ariaLabel="search" iconType="light">\n                <Icon name="search" resolution="low" />\n              </ButtonIcon>\n            </SearchButton>\n            <Input\n              autoComplete="off"\n              label="Search"\n              name="q"\n              placeholder="Search"\n              type="search"\n              useNativePlaceholder\n            />\n          </Search>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h2">Search Expandable (with state)</Typography>\n          <Typography>\n            When the search feature is more of a secondary action and\n            the allowed canvas real-estate is limited, the search magnifying\n            glass icon can be used as an entry point to invoke a modal search box.\n          </Typography>\n          <Typography>\n            Once users press the search icon, the text field will expand and be ready for input.\n          </Typography>\n          <Typography>\n            After the field is expanded, if focus is removed from field\n            before an entry is made, then the field will collapse to it\u2019s default state.\n          </Typography>\n          <Typography>\n            Pressing the search icon while the field is expanded will check\n            if the field contains entered text. If there is an entry then a\n            search is performed, otherwise the field is collapsed to it\u2019s default state.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Search container expandable>\n            <Input\n              autoComplete="off"\n              expanded={stateOne.expanded}\n              label="Search"\n              name="q"\n              onBlur={handleBlurOne}\n              onChange={e => setStateOne({ ...stateOne, value: e.target.value })}\n              placeholder="Search"\n              ref={refOne}\n              type="search"\n              useNativePlaceholder\n              value={stateOne.value}\n            />\n            <SearchButton>\n              <ButtonIcon\n                ariaLabel="search"\n                iconType={stateOne.expanded ? \'light\' : undefined}\n                onClick={handleClickOne}\n              >\n                <Icon name="search" resolution="low" />\n              </ButtonIcon>\n            </SearchButton>\n          </Search>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h2">Navigation Bar With Standard Expandable Search</Typography>\n          <Typography>\n            Search feature as placed in the Navigation Bar will gather\n            results from across the entire app experience. By default,\n            it will use the expandable behavior with non-dynamic search behavior.\n            This design of the text field input (no borders) is specific to Search on the Navigation Bar.\n          </Typography>\n          <Typography>\n            Default\n          </Typography>\n          <Typography>\n            By default the user will only see the Search magnifying glass\n            icon as part of the navigation bar. To invoke the search feature,\n            the user will press on the icon button.\n          </Typography>\n          <Typography>\n            After Expansion\n          </Typography>\n          <Typography>\n            Once the user presses on the Search magnifying glass,\n            the search box will expand and place the focus on the text\n            field, ready for users to type in their query.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Nav position="relative">\n            <Grid>\n              <Row>\n                <Col>\n                  <NavSkip href="#content">Skip to main content</NavSkip>\n                  <NavBrand>\n                    <NavBrandInfo>\n                      <ButtonIcon ariaLabel="menu" iconType="dark">\n                        <Icon name="menu" resolution="low" />\n                      </ButtonIcon>\n                      <NavBrandLogo href="http://www.visa.com">\n                        <NavBrandLogoImage alt="Visa" src="http://ux/projects/visa-ui-web/3.0.0-alpha.12/_logos/visa/visa_vbm_wht.svg" />\n                      </NavBrandLogo>\n                    </NavBrandInfo>\n                  </NavBrand>\n                  <NavSite>\n                    <NavLinks ariaLabel="Site Navigation">\n                      <TabList>\n                        <Tab tag={<a />} href="http://www.visa.com">Contact</Tab>\n                        <Tab tag={<a />} href="http://www.visa.com">Service</Tab>\n                        <Tab tag={<a />} href="http://www.visa.com">Statistics</Tab>\n                      </TabList>\n                    </NavLinks>\n                  </NavSite>\n                  <NavAction>\n                    <NavActionInfo>\n                      <Search expandable navbar>\n                        <Input\n                          autoComplete="off"\n                          expanded={stateTwo.expanded}\n                          label="Search"\n                          name="q"\n                          onBlur={handleBlurTwo}\n                          onChange={e => setStateTwo({ ...stateTwo, value: e.target.value })}\n                          placeholder="Search"\n                          ref={refTwo}\n                          type="search"\n                          useNativePlaceholder\n                          value={stateTwo.value}\n                        />\n                        <SearchButton>\n                          <ButtonIcon\n                            ariaLabel="search"\n                            iconType={stateTwo.expanded ? \'light\' : \'dark\'}\n                            onClick={handleClickTwo}\n                          >\n                            <Icon name="search" resolution="low" />\n                          </ButtonIcon>\n                        </SearchButton>\n                      </Search>\n                    </NavActionInfo>\n                  </NavAction>\n                </Col>\n              </Row>\n            </Grid>\n          </Nav>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h2">Dynamic Search</Typography>\n          <Typography>\n            Dynamic search begins when the user starts typing in their\n            query after invoking the search function. Users will see a\n            list of auto-suggestions to help users find the proper query or\n            related results. The search-as-you-type is often used in dedicated\n            search experiences and often in mobile app experiences.\n          </Typography>\n          <Typography>\n            Typing three or more characters presents the search assist menu.\n          </Typography>\n          <Typography>\n            Note: Unlike Standard Search, Dynamic Search includes a\n            "clear entry" button and not a Search button and the input\n            field is 40px tall.\n          </Typography>\n          <Typography>\n            The clear button will show up if users entered a keyword entry.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Search dynamic>\n            <Input\n              autoComplete="off"\n              label="Search"\n              name="q"\n              onChange={e => setStateThree({ value: e.target.value })}\n              placeholder="Search"\n              type="search"\n              useNativePlaceholder\n              value={stateThree.value}\n            />\n            <SearchIcon>\n              <Icon name="search" resolution="low" />\n            </SearchIcon>\n            {\n              stateThree.value.length\n                ? <SearchClearButton>\n                  <ButtonIcon\n                    ariaLabel="clear entry"\n                    iconType="light-tiny"\n                    onClick={() => setStateThree({ value: \'\' })}\n                  >\n                    <Icon name="clear" resolution="tiny" />\n                  </ButtonIcon>\n                </SearchClearButton>\n                : undefined\n            }\n          </Search>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h2">Contextual Search</Typography>\n          <Typography>\n            As the search scope becomes more narrow and contextual,\n            the placement of the search feature will be placed closer with\n            the content that it will search. This will utilize the text field,\n            hidden label variant. The search feature may run dynamically\n            depending on the app architecture.\n          </Typography>\n          <Typography>\n            Typing three or more characters presents the search assist menu.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Search dynamic>\n            <Input\n              autoComplete="off"\n              label="Search"\n              name="q"\n              onChange={e => setStateFour({ value: e.target.value })}\n              placeholder="Search news articles"\n              type="search"\n              useNativePlaceholder\n              value={stateFour.value}\n            />\n            <SearchIcon>\n              <Icon name="search" resolution="low" />\n            </SearchIcon>\n            {\n              stateFour.value.length\n                ? <SearchClearButton>\n                  <ButtonIcon\n                    ariaLabel="clear entry"\n                    iconType="light-tiny"\n                    onClick={() => setStateFour({ value: \'\' })}\n                  >\n                    <Icon name="clear" resolution="tiny" />\n                  </ButtonIcon>\n                </SearchClearButton>\n                : undefined\n            }\n          </Search>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default SearchExample;\n'.replace(/'..\/..\//g,"'@visa/vds-react/"),ee=function(e){var a=Object(r.a)({},e),n=Object(l.useState)({}),c=Object(t.a)(n,2),h=c[0],O=c[1];return Object(l.useEffect)((function(){try{O(Q.parse(Y))}catch(e){console.log("\n        React-docgen could not parse props for Search\n        check for fix here https://github.com/reactjs/react-docgen/issues/342")}}),[]),o.a.createElement(y.a,{siblingOfStickyFooter:!0},o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(C.a,{tag:"h1"},"Search"))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(w.a,null,o.a.createElement(b.a,{tag:o.a.createElement(p.c,{exact:!0,to:"".concat("/vds-react","/components/search"),activeClassName:"vds-state--selected"})},o.a.createElement(f.a,{name:"log",resolution:"low"}),"Search Example"),o.a.createElement(b.a,{tag:o.a.createElement(p.c,{exact:!0,to:"".concat("/vds-react","/components/search/code"),activeClassName:"vds-state--selected"})},o.a.createElement(f.a,{name:"code-fork-code-alt",resolution:"low"}),"Code for Search Example")))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement("div",{className:s()({"vds-state--hidden":a.match.path==="".concat("/vds-react","/components/search/code"),"vds-state--show":a.match.path!=="".concat("/vds-react","/components/search/code")})},o.a.createElement(M,a)),o.a.createElement("div",{className:s()({"vds-state--hidden":a.match.path!=="".concat("/vds-react","/components/search/code"),"vds-state--show":a.match.path==="".concat("/vds-react","/components/search/code")})},o.a.createElement(i.a,Object.assign({},i.b,{theme:u.a,code:Z,language:"jsx"}),(function(e){var a=e.className,n=e.style,t=e.tokens,r=e.getLineProps,l=e.getTokenProps;return o.a.createElement("pre",{className:a,style:n},t.map((function(e,a){return o.a.createElement("div",r({key:a,line:e}),o.a.createElement("span",{style:{display:"inline-block",opacity:"0.3",userSelect:"none",width:"2em"}},a+1),e.map((function(e,a){return o.a.createElement("span",l({key:a,token:e}))})))})))}))))),o.a.createElement(g.a,null,o.a.createElement(d.a,null,o.a.createElement(m.a,{className:s()(["components"]),dividerLines:!0,size:"compact"},o.a.createElement(v.a,{tag:"caption"},"Props"),o.a.createElement(x.a,null,o.a.createElement(N.a,{className:"vds-tr"},o.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Prop"),o.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Type"),o.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Default"),o.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Description"))),o.a.createElement(E.a,null,h.props&&Object.entries(h.props).filter((function(e){return"@ignore"!==e[1].description})).map((function(e,a){return o.a.createElement(N.a,{className:"vds-tr",key:a,tabIndex:"0"},o.a.createElement(S.a,{className:"vds-td"},e[0]," ",e[1].required?o.a.createElement("sup",{style:{color:"red"}}," required"):""),o.a.createElement(S.a,{className:"vds-td"},o.a.createElement("strong",null,e[1].type.name),e[1].type.value&&e[1].type.value.length?o.a.createElement("small",{style:{color:"#1a1f71"}},o.a.createElement("br",null),e[1].type.value.length?e[1].type.value.map((function(e){return e.value||e.name})).join(", "):void 0):""),o.a.createElement(S.a,{className:"vds-td"},e[1].defaultValue?e[1].defaultValue.value:""),o.a.createElement(S.a,{className:"vds-td"},e[1].description))})))))))};ee.displayName="SearchExample";a.default=ee},792:function(e,a,n){"use strict";var t=n(2),r=n(5),l=n(0),o=n.n(l),c=n(4),s=n.n(c),i=function(e){var a=e.children,n=e.className,l=e.show,c=Object(r.a)(e,["children","className","show"]);return o.a.createElement("div",Object.assign({className:s()("vds-nav-site",Object(t.a)({},"".concat("vds-state","--show"),Boolean(l)),n)},c),a)};i.displayName="NavSite",a.a=i}}]);
//# sourceMappingURL=66.74b34feb.chunk.js.map