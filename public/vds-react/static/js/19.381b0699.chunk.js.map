{"version":3,"sources":["components/chip/index.js","components/chip-container/index.js","components/chip-text/index.js","components/chip/example/index.js","styleguide/pages/components/chip.js","components/data-table/index.js","components/sr/index.js","components/tbody/index.js","components/td/index.js","components/th/index.js","components/thead/index.js","components/tr/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/nanoid/format.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/fieldset/index.js","components/checkbox/index.js","components/avatar-photo/index.js"],"names":["Chip","children","className","disabled","focused","onBlur","onChange","onFocus","readonly","selected","type","remainingProps","useState","focus","setFocus","select","setSelect","useEffect","classnames","Boolean","event","target","checked","tabIndex","undefined","defaultProps","displayName","ChipContainer","ChipText","ChipExample","items","id","label","value","state","setState","handleChange","e","map","item","initials","alt","src","ariaLabel","iconType","name","resolution","tag","variant","key","reactDocs","require","jsParsed","replace","exampleCode","componentProps","setComponentProps","parse","console","log","siblingOfStickyFooter","exact","to","process","activeClassName","match","path","theme","code","language","style","tokens","getLineProps","getTokenProps","line","i","display","opacity","userSelect","width","token","dividerLines","size","aria-sort","role","scope","props","Object","entries","filter","doc","description","required","color","length","v","join","defaultValue","DataTable","forwardRef","ref","customizableColumns","keyValuePairs","reveal","revealFirstColumn","revealLastColumn","rowSelection","stickyHeader","propTypes","node","string","columns","arrayOf","shape","bool","data","oneOf","Sr","Tag","elementType","Tbody","Td","textAlign","Th","Thead","Tr","alphabet","previousSeed","shuffled","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","ind","arr","lastIndexOf","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","REDUCE_TIME","version","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array","bytes","mask","LN2","step","ceil","byte","RegExp","test","Fieldset","Checkbox","shortid","indeterminate","invalid","defaultChecked","check","setCheck","indetermined","setIndetermined","rId","htmlFor","onClick","stopPropagation","AvatarPhoto","Children","only","cloneElement"],"mappings":"+YAOMA,EAAO,SAAC,GAYP,IAAD,EAXJC,EAWI,EAXJA,SACAC,EAUI,EAVJA,UACAC,EASI,EATJA,SACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,OACAC,EAMI,EANJA,SACAC,EAKI,EALJA,QACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,KACGC,EACC,0HACsBC,mBAASR,GAD/B,mBACGS,EADH,KACUC,EADV,OAEwBF,mBAASH,GAFjC,mBAEGM,EAFH,KAEWC,EAFX,KAIJC,qBAAU,WACRH,EAASV,KACR,CAACA,IAEJa,qBAAU,WACRD,EAAUP,KACT,CAACA,IAuBJ,OACE,uCACEP,UAAWgB,KAAU,6BAlDR,YAmDiB,YAATR,GADA,wBAlDR,WAkDQ,YAEiB,WAATA,GAFR,wBAjDT,YAiDS,cAGSS,QAAQhB,IAHjB,wBAjDT,YAiDS,cAISgB,QAAQX,IAJjB,wBAjDT,YAiDS,cAKSW,QAAQJ,IAAoB,WAATL,GAL5B,wBAjDT,YAiDS,WAMMS,QAAQN,IANd,GAOlBX,GACHG,OAxBe,SAAAe,GACjBN,GAAS,GACa,oBAAXT,GACTA,EAAOe,IAsBPd,SAlBiB,SAAAc,GACnBJ,EAAUI,EAAMC,OAAOC,SACC,oBAAbhB,GACTA,EAASc,IAgBTb,QAjCgB,SAAAa,GAClBN,GAAS,GACc,oBAAZP,GACTA,EAAQa,IA+BRG,SAAUpB,GAAY,OAAIqB,GACtBb,GAEHV,IAwDPD,EAAKyB,aAAe,CAClBf,KAAM,WAGRV,EAAK0B,YAAc,OAEJ1B,QC5HT2B,EAAgB,SAAC,GAAD,IAAG1B,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAcS,EAA3B,+CACpB,uCACET,UAAWgB,IAJI,qBAImBhB,IAC9BS,GAEHV,IAgBL0B,EAAcD,YAAc,gBAEbC,QCvBTC,EAAW,SAAC,GAAD,IAAG3B,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAcS,EAA3B,+CACf,wCACET,UAAWgB,IAJI,gBAImBhB,IAC9BS,GAEHV,IAgBL2B,EAASF,YAAc,WAERE,Q,uOCdf,IAwUeC,EAxUK,WAAO,IAAD,EACEjB,mBAAS,CACjCkB,MAAO,CACL,CACER,SAAS,EACTS,GAAI,oBACJC,MAAO,kBACPC,MAAO,WAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,SACPC,MAAO,UAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,UACPC,MAAO,WAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,MACPC,MAAO,OAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,MACPC,MAAO,OAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,cACPC,MAAO,eAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,gBACPC,MAAO,iBAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,oFACPC,MAAO,WAET,CACEX,SAAS,EACTS,GAAI,oBACJC,MAAO,OACPC,MAAO,QAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,QACPC,MAAO,SAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,SACPC,MAAO,UAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,SACPC,MAAO,UAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,QACPC,MAAO,SAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,QACPC,MAAO,SAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,MACPC,MAAO,OAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,MACPC,MAAO,OAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,OACPC,MAAO,QAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,WACPC,MAAO,YAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,cACPC,MAAO,eAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,cACPC,MAAO,QAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,gBACPC,MAAO,iBAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,UACPC,MAAO,WAET,CACEX,SAAS,EACTS,GAAI,qBACJC,MAAO,SACPC,MAAO,UAET,CACEX,SAAS,EACTS,GAAI,qBACJ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","file":"static/js/19.381b0699.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { bool, func, node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-chip';\nconst CSS_STATE = 'vds-state';\n\nconst Chip = ({\n  children,\n  className,\n  disabled,\n  focused,\n  onBlur,\n  onChange,\n  onFocus,\n  readonly,\n  selected,\n  type,\n  ...remainingProps\n}) => {\n  const [focus, setFocus] = useState(focused);\n  const [select, setSelect] = useState(selected);\n\n  useEffect(() => {\n    setFocus(focused);\n  }, [focused]);\n\n  useEffect(() => {\n    setSelect(selected);\n  }, [selected]);\n\n  const handleFocus = event => {\n    setFocus(true);\n    if (typeof onFocus === 'function') {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setFocus(false);\n    if (typeof onBlur === 'function') {\n      onBlur(event);\n    }\n  };\n\n  const handleChange = event => {\n    setSelect(event.target.checked);\n    if (typeof onChange === 'function') {\n      onChange(event);\n    }\n  };\n\n  return (\n    <div\n      className={classnames({\n        [`${CSS_PREFIX}`]: type === 'default',\n        [`${CSS_PREFIX}--filter`]: type === 'filter',\n        [`${CSS_STATE}--disabled`]: Boolean(disabled),\n        [`${CSS_STATE}--readonly`]: Boolean(readonly),\n        [`${CSS_STATE}--selected`]: Boolean(select) && type === 'filter',\n        [`${CSS_STATE}--focus`]: Boolean(focus)\n      }, className)}\n      onBlur={handleBlur}\n      onChange={handleChange}\n      onFocus={handleFocus}\n      tabIndex={disabled ? -1 : undefined}\n      {...remainingProps}\n    >\n      {children}\n    </div>\n  );\n};\n\nChip.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n  * disabled\n  */\n  disabled: bool,\n\n  /**\n  * focused\n  */\n  focused: bool,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onBlur: func,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onChange: func,\n\n  /**\n   * Callback fired when the input element is focused on.\n   */\n  onFocus: func,\n\n  /**\n  * Readonly\n  */\n  readonly: bool,\n\n  /**\n  * Selected\n  */\n  selected: bool,\n  /**\n   * Type\n   */\n  type: oneOf(['default', 'filter'])\n};\n\nChip.defaultProps = {\n  type: 'default'\n};\n\nChip.displayName = 'Chip';\n\nexport default Chip;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-chip-container';\n\nconst ChipContainer = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nChipContainer.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nChipContainer.displayName = 'ChipContainer';\n\nexport default ChipContainer;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-chip-text';\n\nconst ChipText = ({ children, className, ...remainingProps }) => (\n  <span\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nChipText.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nChipText.displayName = 'ChipText';\n\nexport default ChipText;\n","import React, { useState } from 'react';\nimport Avatar from '../../avatar';\nimport AvatarPhoto from '../../avatar-photo';\nimport ButtonIcon from '../../button-icon';\nimport Checkbox from '../../checkbox';\nimport Chip from '../../chip';\nimport ChipContainer from '../../chip-container';\nimport ChipText from '../../chip-text';\nimport Col from '../../col';\nimport Fieldset from '../../fieldset';\nimport Grid from '../../grid';\nimport Icon from '../../icon';\nimport Row from '../../row';\nimport Typography from '../../typography';\n\nconst ChipExample = () => {\n  const [state, setState] = useState({\n    items: [\n      {\n        checked: false,\n        id: 'chip-group-test-1',\n        label: 'Popular near me',\n        value: 'Popular'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-2',\n        label: 'Advice',\n        value: 'Advice'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-3',\n        label: 'Animals',\n        value: 'Animals'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-4',\n        label: 'Art',\n        value: 'Art'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-5',\n        label: 'DIY',\n        value: 'DIY'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-6',\n        label: 'Electronics',\n        value: 'Electronics'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-7',\n        label: 'Entertainment',\n        value: 'Entertainment'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-8',\n        label: 'Explain like I\\'m five and lorem ipsum dolor sit amet, consectetur adipiscing elit',\n        value: 'Explain'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-9',\n        label: 'Food',\n        value: 'Food'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-10',\n        label: 'Funny',\n        value: 'Funny'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-11',\n        label: 'Gaming',\n        value: 'Gaming'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-12',\n        label: 'Health',\n        value: 'Health'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-13',\n        label: 'Memes',\n        value: 'Memes'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-14',\n        label: 'Music',\n        value: 'Music'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-15',\n        label: 'NBA',\n        value: 'NBA'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-16',\n        label: 'NFL',\n        value: 'NFL'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-17',\n        label: 'News',\n        value: 'News'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-18',\n        label: 'Outdoors',\n        value: 'Outdoors'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-19',\n        label: 'Photography',\n        value: 'Photography'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-20',\n        label: 'Pics & GIFs',\n        value: 'Pics'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-21',\n        label: 'Relationships',\n        value: 'Relationships'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-22',\n        label: 'Science',\n        value: 'Science'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-23',\n        label: 'Sports',\n        value: 'Sports'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-24',\n        label: 'TV',\n        value: 'TV'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-25',\n        label: 'Tech',\n        value: 'Tech'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-26',\n        label: 'Travel',\n        value: 'Travel'\n      },\n      {\n        checked: true,\n        id: 'chip-group-test-27',\n        label: 'Video Games',\n        value: 'Video'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-28',\n        label: 'Videos',\n        value: 'Videos'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-29',\n        label: 'Broom',\n        value: 'Broom'\n      },\n      {\n        checked: false,\n        id: 'chip-group-test-30',\n        label: 'Writing',\n        value: 'Writing'\n      }\n    ]\n  });\n\n  const handleChange = e => setState({\n    items: [\n      ...state.items.map(item => ({\n        ...item,\n        checked: e.target.id === item.id ? !item.checked : item.checked\n      }))\n    ]\n  });\n\n  return (\n    <Grid>\n      <Row>\n        <Col>\n          Chip Default\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Chip>\n            <ChipText>Default Chip</ChipText>\n          </Chip>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          Chip Default with Avatar\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Chip>\n            <Avatar initials=\"AS\" label=\"Adam Smith\" />\n            <ChipText>Adam Smith</ChipText>\n          </Chip>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          Chip Default with Avatar\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Chip>\n            <Avatar>\n              <AvatarPhoto label=\"Adam Smith\">\n                <img alt=\"Adam Smith\" src=\"http://themethemer-bff0.kxcdn.com/dist/_imgs/stockphoto.jpg\" />\n              </AvatarPhoto>\n            </Avatar>\n            <ChipText>Adam Smith</ChipText>\n          </Chip>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          Chip Default with Icon Button\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Chip>\n            <ChipText>Adam Smith</ChipText>\n            <ButtonIcon ariaLabel=\"search\" iconType=\"light-tiny\">\n              <Icon name=\"close\" resolution=\"tiny\" />\n            </ButtonIcon>\n          </Chip>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          Chip Default with Avatar and icon button\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Chip>\n            <Avatar>\n              <AvatarPhoto label=\"Adam Smith\">\n                <img alt=\"Adam Smith\" src=\"http://themethemer-bff0.kxcdn.com/dist/_imgs/stockphoto.jpg\" />\n              </AvatarPhoto>\n            </Avatar>\n            <ChipText>Adam Smith</ChipText>\n            <ButtonIcon ariaLabel=\"search\" iconType=\"light-tiny\">\n              <Icon name=\"close\" resolution=\"tiny\" />\n            </ButtonIcon>\n          </Chip>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          Chip filter\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Chip type=\"filter\">\n            <Avatar>\n              <AvatarPhoto label=\"Adam Smith\">\n                <img alt=\"Adam Smith\" src=\"http://themethemer-bff0.kxcdn.com/dist/_imgs/stockphoto.jpg\" />\n              </AvatarPhoto>\n            </Avatar>\n            <Checkbox\n              name=\"example\"\n              label=\"Adam Smith\"\n              id=\"chip-filter-test-2\"\n              value=\"2\"\n            />\n          </Chip>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          Chip Group\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ChipContainer>\n            <Fieldset>\n              <Typography tag=\"legend\" variant=\"body--alt\">Select your interests:</Typography>\n              {\n                state.items.map(item => (\n                  <Chip key={item.id} selected={item.checked} type=\"filter\">\n                    <Checkbox\n                      checked={item.checked}\n                      id={item.id}\n                      name=\"chip-group-example\"\n                      onChange={handleChange}\n                      label={item.label}\n                      value={item.value}\n                    />\n                  </Chip>\n                ))\n              }\n            </Fieldset>\n          </ChipContainer>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default ChipExample;\n","/* This file is autogenerated  DO NOT EDIT */\n\nimport React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport raw from \"raw.macro\";\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/github';\nimport { NavLink } from 'react-router-dom';\n\nimport Col from '../../../components/col';\nimport DataTable from '../../../components/data-table';\nimport Icon from '../../../components/icon';\nimport Grid from '../../../components/grid';\nimport Row from '../../../components/row';\nimport Sr from '../../../components/sr';\nimport Tab from '../../../components/tab';\nimport TabList from '../../../components/tab-list';\nimport Tbody from '../../../components/tbody';\nimport Td from '../../../components/td';\nimport Th from '../../../components/th';\nimport Thead from '../../../components/thead';\nimport Tr from '../../../components/tr';\nimport Typography from '../../../components/typography';\n\nimport Example from '../../../components/chip/example';\n\nconst reactDocs = require('react-docgen');\nconst js = raw('../../../components/chip/index.js');\nconst jsParsed = js.replace('= memo(({', '= React.forwardRef(({').replace('cloneElement(', 'React.cloneElement('); // see https://github.com/reactjs/react-docgen/issues/342\nconst exampleCodeRaw = raw('../../../components/chip/example/index.js');\nconst exampleCode = exampleCodeRaw.replace(/'..\\/..\\//g, `'@visa/vds-react/`);\n\nconst ChipExample = ({ ...remainingProps }) => {\n  const [componentProps, setComponentProps] = useState({});\n\n  useEffect(() => {\n    try {\n      setComponentProps(reactDocs.parse(jsParsed));\n    } catch {\n      // eslint-disable-next-line\n      console.log(`\n        React-docgen could not parse props for Chip\n        check for fix here https://github.com/reactjs/react-docgen/issues/342`);\n    }\n  }, []);\n\n  return (\n    <Grid siblingOfStickyFooter>\n      <Row>\n        <Col>\n          <Typography tag=\"h1\">Chip</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <TabList>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/chip`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"log\" resolution=\"low\" />Chip Example\n            </Tab>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/chip/code`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />Code for Chip Example\n            </Tab>\n          </TabList>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/chip/code`,\n              'vds-state--show': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/chip/code`\n            })}\n          >\n            <Example {...remainingProps} />\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/chip/code`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/chip/code`\n            })}\n          >\n            <Highlight {...defaultProps} theme={theme} code={exampleCode} language=\"jsx\">\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DataTable\n            className={classnames([\n              'components'\n            ])}\n            dividerLines\n            size=\"compact\"\n          >\n            <Sr tag=\"caption\">Props</Sr>\n            <Thead>\n              <Tr className=\"vds-tr\">\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Prop\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Type\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Default\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Description\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {\n                componentProps.props && Object.entries(componentProps.props)\n                  .filter(doc => doc[1].description !== '@ignore')\n                  .map((doc, i) => (\n                    <Tr className=\"vds-tr\" key={i} tabIndex=\"0\">\n                      <Td className=\"vds-td\">\n                        {doc[0]} {doc[1].required ? <sup style={{ color: 'red' }}> required</sup> : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        <strong>{doc[1].type.name}</strong>\n                        {\n                          doc[1].type.value && doc[1].type.value.length\n                            ? <small style={{ color: '#1a1f71' }}><br />\n                              {doc[1].type.value.length ? doc[1].type.value.map(v => v.value || v.name).join(', ') : undefined}\n                            </small>\n                            : ''\n                        }\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].defaultValue ? doc[1].defaultValue.value : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].description}\n                      </Td>\n                    </Tr>\n                  ))\n              }\n            </Tbody>\n          </DataTable>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nChipExample.displayName = 'ChipExample';\n\nexport default ChipExample;\n","import React, { forwardRef } from 'react';\nimport { arrayOf, bool, node, oneOf, shape, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-data-table';\nconst CSS_STATE = 'vds-state';\n\nconst DataTable = forwardRef(({\n  children,\n  className,\n  customizableColumns,\n  dividerLines,\n  keyValuePairs,\n  reveal,\n  revealFirstColumn,\n  revealLastColumn,\n  rowSelection,\n  size,\n  stickyHeader,\n  ...remainingProps\n}, ref) => (\n  <table\n    {...remainingProps}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_STATE}--customizable-columns`]: Boolean(customizableColumns),\n      [`${CSS_STATE}--divider-lines`]: Boolean(dividerLines),\n      [`${CSS_STATE}--key-value-pairs`]: Boolean(keyValuePairs),\n      [`${CSS_STATE}--${size}`]: Boolean(size),\n      [`${CSS_STATE}--reveal`]: Boolean(reveal),\n      [`${CSS_STATE}--reveal-first-column`]: Boolean(revealFirstColumn),\n      [`${CSS_STATE}--reveal-last-column`]: Boolean(revealLastColumn),\n      [`${CSS_STATE}--${rowSelection}`]: Boolean(rowSelection),\n      [`${CSS_STATE}--sticky-header`]: Boolean(stickyHeader)\n    }, className)}\n    ref={ref}\n  >\n    {children}\n  </table>\n));\n\nDataTable.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Columns\n   */\n  columns: arrayOf(shape({})),\n\n  /**\n   * Customizable columns\n   */\n  customizableColumns: bool,\n\n  /**\n   * Data\n   */\n  data: arrayOf(shape({})),\n\n  /**\n   * Divider lines\n   */\n  dividerLines: bool,\n\n  /**\n   * Key value pairs\n   */\n  keyValuePairs: bool,\n\n  /**\n   * Reveal\n   */\n  reveal: bool,\n\n  /**\n   * Reveal first column\n   */\n  revealFirstColumn: bool,\n\n  /**\n   * Reveal last column\n   */\n  revealLastColumn: bool,\n\n  /**\n   * Row Selection\n   */\n  rowSelection: oneOf(['multi-select', 'single-select']),\n\n  /**\n   * Size\n   */\n  size: oneOf(['compact']),\n\n  /**\n   * Sticky Header\n   */\n  stickyHeader: bool\n};\n\nDataTable.displayName = 'DataTable';\n\nexport default DataTable;\n","import React, { forwardRef } from 'react';\nimport { elementType, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-sr';\n\nconst Sr = forwardRef(({ children, className, tag: Tag, ...remainingProps }, ref) => (\n  <Tag\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </Tag>\n));\n\nSr.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n  * Tag\n  */\n  tag: elementType\n};\n\nSr.defaultProps = {\n  tag: 'span'\n};\n\nSr.displayName = 'Sr';\n\nexport default Sr;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tbody';\n\nconst Tbody = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tbody\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tbody>\n));\n\nTbody.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTbody.displayName = 'Tbody';\n\nexport default Tbody;\n","import React, { forwardRef } from 'react';\nimport { node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-td';\n\nconst Td = forwardRef(({\n  children,\n  className,\n  textAlign,\n  ...remainingProps\n}, ref) => (\n  <td\n    className={classnames(CSS_PREFIX, {\n      [`vds-text--${textAlign}`]: Boolean(textAlign)\n    }, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </td>\n));\n\nTd.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Text alignment at all sizes\n   */\n  textAlign: oneOf(['center', 'left', 'right'])\n};\n\nTd.displayName = 'Td';\n\nexport default Td;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-th';\n\nconst Th = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <th\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </th>\n));\n\nTh.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTh.displayName = 'Th';\n\nexport default Th;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-thead';\n\nconst Thead = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <thead\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </thead>\n));\n\nThead.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nThead.displayName = 'Thead';\n\nexport default Thead;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tr';\n\nconst Tr = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tr\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tr>\n));\n\nTr.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTr.displayName = 'Tr';\n\nexport default Tr;\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\nvar shuffled;\n\nfunction reset() {\n  shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n  if (!_alphabet_) {\n    if (alphabet !== ORIGINAL) {\n      alphabet = ORIGINAL;\n      reset();\n    }\n\n    return;\n  }\n\n  if (_alphabet_ === alphabet) {\n    return;\n  }\n\n  if (_alphabet_.length !== ORIGINAL.length) {\n    throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n  }\n\n  var unique = _alphabet_.split('').filter(function (item, ind, arr) {\n    return ind !== arr.lastIndexOf(item);\n  });\n\n  if (unique.length) {\n    throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n  }\n\n  alphabet = _alphabet_;\n  reset();\n}\n\nfunction characters(_alphabet_) {\n  setCharacters(_alphabet_);\n  return alphabet;\n}\n\nfunction setSeed(seed) {\n  randomFromSeed.seed(seed);\n\n  if (previousSeed !== seed) {\n    reset();\n    previousSeed = seed;\n  }\n}\n\nfunction shuffle() {\n  if (!alphabet) {\n    setCharacters(ORIGINAL);\n  }\n\n  var sourceArray = alphabet.split('');\n  var targetArray = [];\n  var r = randomFromSeed.nextValue();\n  var characterIndex;\n\n  while (sourceArray.length > 0) {\n    r = randomFromSeed.nextValue();\n    characterIndex = Math.floor(r * sourceArray.length);\n    targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n  }\n\n  return targetArray.join('');\n}\n\nfunction getShuffled() {\n  if (shuffled) {\n    return shuffled;\n  }\n\n  shuffled = shuffle();\n  return shuffled;\n}\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\n\n\nfunction lookup(index) {\n  var alphabetShuffled = getShuffled();\n  return alphabetShuffled[index];\n}\n\nfunction get() {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n  get: get,\n  characters: characters,\n  seed: setSeed,\n  lookup: lookup,\n  shuffled: getShuffled\n};","'use strict';\n\nmodule.exports = require('./lib/index');","'use strict';\n\nvar alphabet = require('./alphabet');\n\nvar build = require('./build');\n\nvar isValid = require('./is-valid'); // if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\n\n\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\n\nfunction seed(seedValue) {\n  alphabet.seed(seedValue);\n  return module.exports;\n}\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\n\n\nfunction worker(workerId) {\n  clusterWorkerId = workerId;\n  return module.exports;\n}\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\n\n\nfunction characters(newCharacters) {\n  if (newCharacters !== undefined) {\n    alphabet.characters(newCharacters);\n  }\n\n  return alphabet.shuffled();\n}\n/**\n * Generate unique id\n * Returns string id\n */\n\n\nfunction generate() {\n  return build(clusterWorkerId);\n} // Export all other functions as properties of the generate function\n\n\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;","'use strict'; // Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\n\nfunction getNextValue() {\n  seed = (seed * 9301 + 49297) % 233280;\n  return seed / 233280.0;\n}\n\nfunction setSeed(_seed_) {\n  seed = _seed_;\n}\n\nmodule.exports = {\n  nextValue: getNextValue,\n  seed: setSeed\n};","'use strict';\n\nvar generate = require('./generate');\n\nvar alphabet = require('./alphabet'); // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n\nvar REDUCE_TIME = 1567752802062; // don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\n\nvar version = 7; // Counter is used when shortid is called multiple times in one second.\n\nvar counter; // Remember the last time shortid was called in case counter is needed.\n\nvar previousSeconds;\n/**\n * Generate unique id\n * Returns string id\n */\n\nfunction build(clusterWorkerId) {\n  var str = '';\n  var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n  if (seconds === previousSeconds) {\n    counter++;\n  } else {\n    counter = 0;\n    previousSeconds = seconds;\n  }\n\n  str = str + generate(version);\n  str = str + generate(clusterWorkerId);\n\n  if (counter > 0) {\n    str = str + generate(counter);\n  }\n\n  str = str + generate(seconds);\n  return str;\n}\n\nmodule.exports = build;","'use strict';\n\nvar alphabet = require('./alphabet');\n\nvar random = require('./random/random-byte');\n\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n  var loopCounter = 0;\n  var done;\n  var str = '';\n\n  while (!done) {\n    str = str + format(random, alphabet.get(), 1);\n    done = number < Math.pow(16, loopCounter + 1);\n    loopCounter++;\n  }\n\n  return str;\n}\n\nmodule.exports = generate;","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n  randomByte = function randomByte(size) {\n    var bytes = [];\n\n    for (var i = 0; i < size; i++) {\n      bytes.push(Math.floor(Math.random() * 256));\n    }\n\n    return bytes;\n  };\n} else {\n  randomByte = function randomByte(size) {\n    return crypto.getRandomValues(new Uint8Array(size));\n  };\n}\n\nmodule.exports = randomByte;","/**\n * Secure random string generator with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {generator} random The random bytes generator.\n * @param {string} alphabet Symbols to be used in new random string.\n * @param {size} size The number of symbols in new random string.\n *\n * @return {string} Random string.\n *\n * @example\n * const format = require('nanoid/format')\n *\n * function random (size) {\n *   const result = []\n *   for (let i = 0; i < size; i++) {\n *     result.push(randomByte())\n *   }\n *   return result\n * }\n *\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\n *\n * @name format\n * @function\n */\nmodule.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  var step = Math.ceil(1.6 * mask * size / alphabet.length);\n  size = +size;\n  var id = '';\n\n  while (true) {\n    var bytes = random(step);\n\n    for (var i = 0; i < step; i++) {\n      var byte = bytes[i] & mask;\n\n      if (alphabet[byte]) {\n        id += alphabet[byte];\n        if (id.length === size) return id;\n      }\n    }\n  }\n};\n/**\n * @callback generator\n * @param {number} bytes The number of bytes to generate.\n * @return {number[]} Random bytes.\n */","'use strict';\n\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n  if (!id || typeof id !== 'string' || id.length < 6) {\n    return false;\n  }\n\n  var nonAlphabetic = new RegExp('[^' + alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') + ']');\n  return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;","'use strict';\n\nmodule.exports = 0;","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-fieldset';\n\nconst Fieldset = ({ children, className, ...remainingProps }) => (\n  <fieldset\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </fieldset>\n);\n\nFieldset.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nFieldset.displayName = 'Fieldset';\n\nexport default Fieldset;\n","import React, { forwardRef, Fragment, useEffect, useState } from 'react';\nimport { bool, func, number, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\n\nconst CSS_PREFIX = 'vds-checkbox';\nconst CSS_STATE = 'vds-state';\n\nconst Checkbox = forwardRef(({\n  className,\n  disabled,\n  id = shortid.generate(),\n  indeterminate,\n  invalid,\n  label,\n  onBlur,\n  onChange,\n  onFocus,\n  ...remainingProps\n}, ref) => {\n  const [focus, setFocus] = useState();\n  const [check, setCheck] = useState(remainingProps.checked || remainingProps.defaultChecked);\n  const [indetermined, setIndetermined] = useState(indeterminate);\n  const [rId] = useState(id);\n\n  useEffect(() => {\n    setIndetermined(indeterminate);\n  }, [indeterminate]);\n\n  useEffect(() => {\n    if (typeof remainingProps.defaultChecked !== 'undefined') {\n      setCheck(remainingProps.defaultChecked);\n    }\n  }, [remainingProps.defaultChecked]);\n\n  useEffect(() => {\n    if (typeof remainingProps.checked !== 'undefined') {\n      setCheck(remainingProps.checked);\n    }\n  }, [remainingProps.checked]);\n\n  const handleChange = event => {\n    setIndetermined(false);\n    setCheck(event.target.checked);\n    if (typeof onChange === 'function') {\n      onChange(event);\n    }\n  };\n\n  const handleFocus = event => {\n    setFocus(true);\n    if (typeof onFocus === 'function') {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setFocus(false);\n    if (typeof onBlur === 'function') {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <Fragment>\n      <input\n        className={classnames(CSS_PREFIX)}\n        disabled={disabled}\n        id={rId}\n        onBlur={handleBlur}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        ref={ref}\n        type=\"checkbox\"\n        {...remainingProps}\n      />\n      <label\n        className={classnames(\n          `${CSS_PREFIX}-label`,\n          {\n            [`${CSS_STATE}--checked`]: Boolean(check),\n            [`${CSS_STATE}--disabled`]: Boolean(disabled),\n            [`${CSS_STATE}--focus`]: Boolean(focus),\n            [`${CSS_STATE}--indeterminate`]: indetermined && !check,\n            [`${CSS_STATE}--invalid`]: Boolean(invalid)\n          },\n          className\n        )}\n        htmlFor={rId}\n        onClick={e => e.stopPropagation()} // if not click event fires 2x, one for checkbox and one for label\n      >\n        {label}\n      </label>\n    </Fragment>\n  );\n});\n\nCheckbox.propTypes = {\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   *   If `true`, the checkbox will be disabled.\n   */\n  disabled: bool,\n\n  /**\n   * The id of the input element.\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   *   Indeterminate\n   */\n  indeterminate: bool,\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   *   The label of the checkbox element.\n   */\n  label: string.isRequired,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onBlur: func,\n\n  /**\n   * On Change fn\n   */\n  onChange: func,\n\n  /**\n   * Callback fired when the input element is focused on.\n   */\n  onFocus: func\n};\n\nCheckbox.displayName = 'Checkbox';\n\nexport default Checkbox;\n","import React, { Children, cloneElement } from 'react';\nimport { element, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-avatar';\n\nconst AvatarPhoto = ({ children, className, label, type, ...remainingProps }) => {\n  if (Children.only(children).type === 'img') {\n    return (\n      cloneElement(\n        children,\n        {\n          alt: Children.only(children).props.alt || label,\n          className: classnames({\n            [`${CSS_PREFIX}--photo`]: Boolean(type) === false,\n            [`${CSS_PREFIX}--${type}`]: Boolean(type)\n          }, className),\n          ...remainingProps\n        }\n      )\n    );\n  }\n\n  return (\n    <div\n      className={classnames(`${CSS_PREFIX}--photo`, className)}\n      {...remainingProps}\n    >\n      {\n        cloneElement(\n          children,\n          {\n            ariaLabel: label,\n            ...remainingProps\n          }\n        )\n      }\n    </div>\n  );\n};\n\nAvatarPhoto.propTypes = {\n  /**\n  * Content\n  */\n  children: element,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Label\n   */\n  label: string.isRequired,\n\n  /**\n   * Type\n   */\n  type: oneOf(['company-logo'])\n};\n\nAvatarPhoto.displayName = 'AvatarPhoto';\n\nexport default AvatarPhoto;\n"],"sourceRoot":""}