/* global PR */
/* global Clipboard */
/* global JsDiff */

(function() {
  var CodeSample = function(id) {
    this.content = {
      importCode: '#' + id,
      exportCode: '',
      original: '',
      current: ''
    };

    this.init = function() {
      var self = this;
      var container;
      var code;
      var copy;
      var copyC;
      var copyG;
      var cid;
      var lastFocus;

      if (
        $(this.content.importCode) === undefined ||
        $(this.content.importCode).html() === undefined
      ) {
        return;
      }

      this.content.exportCode = '#' + id + '-value';
      this.content.original = this.parseString($(this.content.importCode).html());

      container = document.createElement('div');
      code = document.createElement('code');
      copy = document.createElement('span');
      copyC = document.createElement('div');
      copyG = document.createElement('div');
      cid = this.content.exportCode.substr(1);

      container.setAttribute('class', 'code-container');
      copy.setAttribute('role', 'button');
      copy.setAttribute('class', 'visa-ui-btn-link copy-code-btn');
      copy.setAttribute('aria-label', 'Copy code below.');
      copy.setAttribute('id', cid + '-btn');
      copy.setAttribute('tabindex', '0');
      copyC.setAttribute('class', 'visa-ui-btn-container');
      copyG.setAttribute('class', 'visa-ui-btn-group visa-ui-btn-group--right');
      code.setAttribute('class', 'prettyprint');
      code.setAttribute('id', cid);

      $(copy).html('Copy code');
      $(code).html(this.content.original);
      $(copyG).append(copy);
      $(copyC).append(copyG);
      $(container).append(copyC);
      $(container).append(code);
      $(this.content.importCode).after(container);
      setTimeout(function() {
        new Clipboard('#' + cid + '-btn', {
          text: function() {
            return $(self.content.importCode)
              .html()
              .trim();
          }
        });
      }, 100);

      this.prettyPrint();

      // copy code
      $('.copy-code-btn')
        .on('click', function() {
          lastFocus = $(this);
          $('.visa-ui-toast#styleguide-toast')
            .addClass('visa-ui-state--show')
            .find('.visa-ui-btn-link')
            .on('click', function() {
              $('#styleguide-toast').removeClass('visa-ui-state--show');
              lastFocus.focus();
              $(this).off('click');
              $(this).attr('tabindex', '-1');
            })
            .on('keyup', function(e) {
              if (e.which === 13) {
                $(this).click();
              }
            });
          $('.visa-ui-toast#styleguide-toast')
            .find('.visa-ui-toast-label')
            .html('Successfully copied code.');
          $('.visa-ui-toast#styleguide-toast')
            .find('.visa-ui-btn-link')
            .attr('tabindex', '0')
            .focus();
        })
        .on('keyup', function(e) {
          if (e.which === 13) {
            $(this).click();
          }
        });
    };

    this.reprint = function() {
      var input = this.parseString($(this.content.importCode).html());
      var diffs = JsDiff.diffChars(this.content.original, input);
      var color = '';
      var span;
      var self = this;

      $(this.content.exportCode).removeClass('prettyprinted');
      this.content.current = '';

      diffs.forEach(function(part) {
        if (part.added) {
          color = 'diff-add';
        } else if (part.removed) {
          color = 'diff-del';
        } else {
          color = 'diff-same';
        }
        span = '<span class="' + color + '">' + part.value + '</span>';
        self.content.current += span;
      });

      $(this.content.exportCode).html(this.content.current);
      this.prettyPrint();
    };

    this.prettyPrint = function() {
      (function() {
        PR.prettyPrint();
      })();
    };

    this.parseString = function(s) {
      return s
        .replaceAll(' codify=""', '')
        .replaceAll(' hidden=""', '')
        .replaceAll(' static=""', '')
        .replaceAll('<', '&lt;')
        .replaceAll('>', '&gt;')
        .replaceAll('\n', '<br/>')
        .replaceAll('\t', '&nbsp;')
        .replaceAll('  ', '&nbsp;');
    };

    this.init();

    return this;
  };

  var Codenamic = function() {
    var codeSamples = {};

    this.add = function(id) {
      codeSamples[id] = new CodeSample(id);
    };

    this.reprint = function(id) {
      if (id === undefined) {
        Object.keys(codeSamples).forEach(function(e) {
          if ($(codeSamples[e].content.importCode).length <= 0) {
            return;
          }
          codeSamples[e].reprint();
        });
      }

      if (
        id !== undefined &&
        codeSamples[id] !== undefined &&
        $(codeSamples[id].content.importCode).length > 0
      ) {
        codeSamples[id].reprint();
      }
    };

    return this;
  };

  if (typeof exports === 'object') {
    module.exports = new Codenamic();
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return new Codenamic();
    });
  } else {
    window.Codenamic = new Codenamic();
  }
})();

// AUTO ADD NEW COMPONENT TO TABLE.

window.getComponentData = function() {
  var tableItems = [];

  $.getJSON('../data.json', function(data) {
    $.each(data, function(key, val) {
      var statuss = ['Queued', 'Development', 'Testing', 'Ready'];
      var stage = '<div class="visa-ui-stage-container"><div class="visa-ui-stage">';
      var index = statuss.indexOf($.trim(val.status));
      var i;

      if (index >= 0) {
        for (i = 0; i < statuss.length; i++) {
          stage += '<div class="visa-ui-stage-step';
          if (i === index) {
            stage += ' visa-ui-state--complete-' + Math.floor(9 * i / statuss.length);
          }
          stage += '"></div>';
        }
      }

      stage += '</div>';
      stage += '<span class="visa-ui-stage-label">';
      stage += val.status;
      stage += '</span></div>';

      tableItems.push(
        '<tr><td><a href="../' +
          val.docs +
          '">' +
          val.name +
          '</a></td>    <td>' +
          stage +
          '</td>    <td><a href="../' +
          val.docs +
          '"><svg class="visa-ui-icon"><use href="#notes--low"></use></svg> Docs</a></td>    <td><a href="' +
          (val.guideline.length > 0
            ? val.guideline +
              '" target="_blank"><svg class="visa-ui-icon"><use href="#maximize--low"></use></svg> Guidelines</a>'
            : '') +
          '</td></tr>'
      );
    });
    $('.modular-components').append(tableItems);
  });
};

/* global Codenamic */
/* global Utils */

$(document).ready(function() {
  var currentVersion = '2.0.1';
  var sidePanelVisiblePages = ['/visa-ui-sidepanel/', '/visa-ui-help/'];
  var pathname = window.location.pathname;
  var sidePanelLocationFound = false;
  var d = new Date();
  var p;

  // ======================
  // Set styleguide version
  // ======================
  $('span.styleguide-version').html(currentVersion);

  // ======================
  // Set footer year
  // ======================
  $('span.styleguide-year').html(d.getFullYear());

  // ======================
  // Load Component Data
  // ======================
  $.getJSON('../data.json', function(data) {
    var i;
    var j;
    var up = [];
    var down = [];
    var upButton = 'button#component-consumers-dropdown';
    var downButton = 'button#component-dependencies-dropdown';
    var guidelinesLink = 'a#component-guidelines-link';
    var pathTemp = pathname.substring(
      pathname.substring(0, pathname.length - 1).lastIndexOf('/') + 1
    );
    var path = pathTemp.substring(0, pathTemp.length - 1);
    var items = [];
    var list;

    var createDependentItems = function(array) {
      var i;
      var item;
      var link;
      var items = [];

      var getHostDir = function(url) {
        return url.substring(0, url.substring(0, url.lastIndexOf('/')).lastIndexOf('/'));
      };

      if (array === undefined || array === null || array.length === 0) {
        return items;
      }

      for (i = 0; i < array.length; i++) {
        item = $(document.createElement('li'));
        link = $(document.createElement('a'));
        item.attr('class', 'visa-ui-listbox--item');
        item.attr('tabindex', '0');
        link.attr('class', 'visa-ui-listbox--item-container');
        link.attr('href', getHostDir(window.location.href) + '/' + array[i]);
        link.html(array[i]);
        item.append(link);
        items.push(item);
      }

      return items;
    };

    for (i = 0; i < data.length; i++) {
      if (data[i].name === path) {
        if (data[i].dependencies !== undefined) {
          down = data[i].dependencies;
        }
        if (data[i].guideline !== undefined && data[i].guideline.length > 0) {
          $(guidelinesLink).attr('href', data[i].guideline);
        } else {
          $(guidelinesLink).attr('disabled', 'disabled');
          $(guidelinesLink).attr('aria-disabled', 'true');
        }
      } else {
        if (data[i].dependencies === undefined) {
          continue;
        }
        for (j = 0; j < data[i].dependencies.length; j++) {
          if (data[i].dependencies[j] === path) {
            up.push(data[i].name);
          }
        }
      }
    }

    $(upButton)
      .find('.visa-ui-btn--label')
      .html('Consumers (' + up.length + ')');
    $(downButton)
      .find('.visa-ui-btn--label')
      .html('Dependencies (' + down.length + ')');

    if (down.length === 0) {
      $(downButton).attr('disabled', 'disabled');
      $(downButton).attr('aria-disabled', 'true');
    } else {
      items = createDependentItems(down);
      list = $('#component-dependencies').find('ul.visa-ui-listbox');
      for (i = 0; i < items.length; i++) {
        list.append(items[i]);
      }
    }

    if (up.length === 0) {
      $(upButton).attr('disabled', 'disabled');
      $(upButton).attr('aria-disabled', 'true');
    } else {
      items = createDependentItems(up);
      list = $('#component-consumers').find('ul.visa-ui-listbox');
      for (i = 0; i < items.length; i++) {
        list.append(items[i]);
      }
    }

    new window.Dropdown('button#component-dependencies-dropdown');
    new window.Dropdown('button#component-consumers-dropdown');
  });

  // ======================
  // Select proper menu item
  // ======================
  $('[path]').each(function(i, e) {
    var path = $(e).attr('path');
    if (path !== undefined && path.length > 0 && path === pathname) {
      $(e).addClass('visa-ui-state--active');
    }
  });

  // ======================
  // Trigger automatic codified code-blocks
  // ======================
  $('[codify][auto]').each(function(i, e) {
    Codenamic.add($(e).attr('id'));
  });

  // ======================
  // Scroll to different screen positions
  // ======================
  $('[scrollto]').on('click', function(e) {
    var target;
    var pos;
    var button;
    e.preventDefault();
    button = $(this);
    target = $(this).attr('href');
    pos = $(target).offset().top;

    if ($('.visa-ui-visabar').length > 0) {
      pos -= Utils.getFullHeight('.visa-ui-visabar-brand');
    }

    if ($('.visa-ui-navbar').length > 0) {
      pos -= Utils.getFullHeight('.visa-ui-navbar');
    }

    $('html').animate(
      {
        scrollTop: pos
      },
      1000,
      'swing',
      function() {
        $(button).blur();
        $(target).focus();
      }
    );
  });

  // ======================
  // Enable/disable side panel
  // ======================
  for (p in sidePanelVisiblePages) {
    if (pathname.indexOf(sidePanelVisiblePages[p]) >= 0) {
      sidePanelLocationFound = true;
    }
  }

  if (!sidePanelLocationFound) {
    $('.visa-ui-sidepanel').remove();
  }
});

(function() {
  var Utils = function() {
    this.getPadding = function(elem, side) {
      var padding = $(elem).css('padding-' + side);
      var border = $(elem).css('border-' + side + '-width');

      padding = padding === undefined ? '0px' : padding;
      border = border === undefined ? '0px' : border;

      return (
        parseInt(padding.substring(0, padding.indexOf('px')), 10) +
        parseInt(border.substring(0, border.indexOf('px')), 10)
      );
    };

    this.getFullWidth = function(elem) {
      if ($(elem).length === 0) {
        return 0;
      }
      return this.getPadding(elem, 'left') + $(elem).width() + this.getPadding(elem, 'right');
    };

    this.getFullHeight = function(elem) {
      if ($(elem).length === 0) {
        return 0;
      }
      return this.getPadding(elem, 'top') + $(elem).height() + this.getPadding(elem, 'bottom');
    };

    return this;
  };

  if (typeof exports === 'object') {
    module.exports = new Utils();
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return new Utils();
    });
  } else {
    window.Utils = new Utils();
  }
})();

// http://stackoverflow.com/questions/1144783/how-to-replace-all-occurrences-of-a-string-in-javascript
String.prototype.replaceAll = function(search, replacement) {
  return this.replace(new RegExp(search, 'g'), replacement);
};

// https://stackoverflow.com/questions/1431094/how-do-i-replace-a-character-at-a-particular-index-in-javascript
String.prototype.replaceAt = function(index, replacement) {
  return this.substr(0, index) + replacement + this.substr(index + replacement.length);
};

/*
//  visa-ui-avatar
//  component logic
//
//  @author sacuna
*/

$(document).ready(function() {});

/*
//  visa-ui-buttons
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('button-text-example');
  Codenamic.add('button-icon-example');
  Codenamic.add('button-link-example');
  Codenamic.add('button-group-example');

  // Button Text radio selection
  $('.visa-ui-radio-group#button-text-types .visa-ui-radio-label').on('click', function() {
    var type = $(this)
      .html()
      .toLowerCase();
    var buttonClass = type === 'default' ? '' : '--' + type;
    $('#button-text-example')
      .find('button')
      .removeClass('visa-ui-btn-text')
      .removeClass('visa-ui-btn-text--primary')
      .removeClass('visa-ui-btn-text--secondary')
      .removeClass('visa-ui-btn-text--tertiary')
      .addClass('visa-ui-btn-text' + buttonClass);
    Codenamic.reprint();
  });

  // Button Text state selection
  $('.visa-ui-radio-group#button-text-state .visa-ui-radio-label').on('click', function() {
    var self = this;
    setTimeout(function() {
      var state = $(self)
        .html()
        .toLowerCase();
      var button = $('#button-text-example').find('button');

      switch (state) {
        case 'active':
          button.addClass('visa-ui-state--active');
          button.removeAttr('disabled');
          break;
        case 'disabled':
          button.removeClass('visa-ui-state--active');
          button.attr('disabled', true);
          break;
        case 'default':
        default:
          button.removeClass('visa-ui-state--active');
          button.removeAttr('disabled');
          break;
      }

      Codenamic.reprint();
    }, 100);
  });

  // Button Icon radio selection
  $('.visa-ui-radio-group#button-icon-types .visa-ui-radio-label').on('click', function() {
    var type = $(this)
      .html()
      .toLowerCase();
    var buttonClass = type === 'default' ? '' : '--' + type;
    $('#button-icon-example')
      .find('button')
      .removeClass('visa-ui-btn-icon')
      .removeClass('visa-ui-btn-icon--primary')
      .removeClass('visa-ui-btn-icon--secondary')
      .removeClass('visa-ui-btn-icon--tertiary')
      .addClass('visa-ui-btn-icon' + buttonClass);
    Codenamic.reprint();
  });

  // Button Icon checkbox selection
  $('.visa-ui-radio-group#button-icon-types .visa-ui-checkbox-label').on('click', function() {
    var self = this;
    setTimeout(function() {
      var state = $(self)
        .parent()
        .find('input.visa-ui-checkbox')
        .is(':checked');
      if (state) {
        $('#button-icon-example')
          .find('button')
          .attr('disabled', true);
      } else {
        $('#button-icon-example')
          .find('button')
          .removeAttr('disabled');
      }
      Codenamic.reprint();
    }, 100);
  });

  // Button Link radio selection
  $('.visa-ui-radio-group#button-link-types .visa-ui-radio-label').on('click', function() {
    var type = $(this)
      .html()
      .toLowerCase();
    var buttonClass = type === 'default' ? '' : '--' + type;
    $('#button-link-example')
      .find('[class^="visa-ui-btn-link"]')
      .removeClass('visa-ui-btn-link')
      .removeClass('visa-ui-btn-link--primary')
      .removeClass('visa-ui-btn-link--secondary')
      .removeClass('visa-ui-btn-link--tertiary')
      .addClass('visa-ui-btn-link' + buttonClass);
    Codenamic.reprint();
  });

  // Button Link checkbox selection
  $('.visa-ui-radio-group#button-link-types .visa-ui-checkbox-label').on('click', function() {
    var self = this;
    setTimeout(function() {
      var example = $('#button-link-example').find('[class^="visa-ui-btn-link"]');
      var state = $(self)
        .parent()
        .find('input.visa-ui-checkbox')
        .is(':checked');
      if (state) {
        example.attr('disabled', true);
      } else {
        example.removeAttr('disabled');
      }
      Codenamic.reprint();
    }, 100);
  });

  $('.visa-ui-radio-group#button-group-types .visa-ui-radio-label').on('click', function() {
    var type = $(this)
      .html()
      .toLowerCase();
    // var buttonClass = type === 'default' ? '' : '--' + type;

    switch (type) {
      case 'right':
        $('#button-group-example .visa-ui-btn-group')
          .removeClass('visa-ui-btn-group--reverse')
          .addClass('visa-ui-btn-group--right');
        break;
      case 'reverse':
        $('#button-group-example .visa-ui-btn-group')
          .removeClass('visa-ui-btn-group--right')
          .addClass('visa-ui-btn-group--reverse');
        break;
      case 'default':
      default:
        $('#button-group-example .visa-ui-btn-group')
          .removeClass('visa-ui-btn-group--right')
          .removeClass('visa-ui-btn-group--reverse');
        break;
    }

    // $('#button-link-example')
    //   .find('[class^="visa-ui-btn-link"]')
    //   .attr('class', 'visa-ui-btn-link' + buttonClass);
    Codenamic.reprint();
  });
});

/*
//	visa-ui-carousel
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

window.Carousel = function(elem) {
  // var self = this;

  // ==================
  //  Contained Elements
  // ==================
  var btnRight = $(elem).find('.visa-ui-carousel-control--right');
  var btnLeft = $(elem).find('.visa-ui-carousel-control--left');
  var counterCurrent = $(elem).find('.visa-ui-carousel-counter--current');
  var counterMax = $(elem).find('.visa-ui-carousel-counter--max');
  var cardsElement = $(elem).find('ul.visa-ui-carousel-cards');
  var currentCard = 0;

  // ==================
  //  Cards
  // ==================
  var cards = cardsElement.find('[class^="visa-ui-carousel-card"]');

  // ==================
  //  Flags
  // ==================

  // ==================
  //  Methods
  // ==================
  var updateCount = function() {
    counterCurrent.html(currentCard + 1);
    counterMax.html(cards.length);
    Codenamic.reprint();
  };

  var init = function() {
    btnLeft.attr('disabled', true);
    updateCount();
  };

  var next = function() {
    var card;
    var old = $(cards[currentCard]);
    currentCard += 1;
    card = $(cards[currentCard]);

    card
      .removeClass('visa-ui-state--hide')
      .addClass('visa-ui-carousel-card--animation--right-to-default');
    old.addClass('visa-ui-carousel-card--animation--default-to-left');
    setTimeout(function() {
      card.attr('class', 'visa-ui-carousel-card');
      old.attr('class', 'visa-ui-carousel-card--left visa-ui-state--hide');
      Codenamic.reprint();
    }, 250);

    if (currentCard > 0) {
      btnLeft.removeAttr('disabled');
    }

    if (currentCard === cards.length - 1) {
      btnRight.attr('disabled', true);
    }

    updateCount();
  };

  var prev = function() {
    var card;
    var old = $(cards[currentCard]);
    currentCard -= 1;
    card = $(cards[currentCard]);

    card
      .removeClass('visa-ui-state--hide')
      .addClass('visa-ui-carousel-card--animation--left-to-default');
    old.addClass('visa-ui-carousel-card--animation--default-to-right');
    setTimeout(function() {
      card.attr('class', 'visa-ui-carousel-card');
      old.attr('class', 'visa-ui-carousel-card--right visa-ui-state--hide');
      Codenamic.reprint();
    }, 250);

    if (currentCard < cards.length - 1) {
      btnRight.removeAttr('disabled');
    }

    if (currentCard === 0) {
      btnLeft.attr('disabled', true);
    }

    updateCount();
  };

  // ==================
  //  Interactions
  // ==================
  $(elem)
    .find('.visa-ui-carousel-control--left:not([disabled])')
    .on('click', function() {
      prev();
    });

  $(elem)
    .find('.visa-ui-carousel-control--right:not([disabled])')
    .on('click', function() {
      next();
    });

  setTimeout(function() {
    init();
  }, 10);
};

$(document).ready(function() {
  setTimeout(function() {
    if ($('#carousel-example .visa-ui-carousel').length > 0) {
      new window.Carousel($('#carousel-example .visa-ui-carousel'));
    }
  }, 10);
  Codenamic.add('carousel-example');
});

/*
//  visa-ui-checkbox
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('checkbox-example');
});

/*
//	visa-ui-colorselector
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */
/* global Dropdown */
/* global Slider */

window.Colorselector = function(elem) {
  var self = this;

  // ==================
  //  Contained Elements
  // ==================
  var colorbox = $(elem).find('.visa-ui-colorbox');
  var colorboxNode = $(elem).find('.visa-ui-colorbox-node');
  var inputHex = $(elem).find('input[name="hex"]');
  var inputRed = $(elem).find('input[name="red"]');
  var inputGreen = $(elem).find('input[name="green"]');
  var inputBlue = $(elem).find('input[name="blue"]');
  var inputAlpha = $(elem).find('input[name="alpha"]');
  var colorPreview = $(elem).find(
    '.visa-ui-colorselector-icon--choice .visa-ui-colorselector-placeholder'
  );
  var colorAlphaSlider = $(elem).find('.visa-ui-slider.visa-ui-colorbar--alpha');
  var colorLabel = $(elem).find('button.visa-ui-btn-split .visa-ui-btn--label');
  var buttonTrigger = $(elem).find('.visa-ui-btn-split.visa-ui-colorselector-trigger');

  // ==================
  //  Flags
  // ==================
  var isMoving = false;

  // ==================
  //  Colors
  // ==================
  var themeColor = {
    color: 'jackson-purple',
    hex: '#1E237E',
    rgb: [30, 35, 126]
  };

  var currentBase = {
    rgb: themeColor.rgb.slice(0),
    hex: themeColor.hex,
    alpha: 100
  };

  var currentColor = {
    rgb: themeColor.rgb.slice(0),
    hex: themeColor.hex,
    alpha: 100
  };

  var colorWheel = [
    {
      color: 'red',
      hex: 'ff0000',
      rgb: [255, 0, 0]
    },
    {
      color: 'orange',
      hex: 'ffa500',
      rgb: [255, 165, 0]
    },
    {
      color: 'yellow',
      hex: 'ffff00',
      rgb: [255, 255, 0]
    },
    {
      color: 'lime',
      hex: '00ff00',
      rgb: [0, 255, 0]
    },
    {
      color: 'cyan',
      hex: '00ffff',
      rgb: [0, 255, 255]
    },
    {
      color: 'blue',
      hex: '0000ff',
      rgb: [0, 0, 255]
    },
    {
      color: 'magenta',
      hex: 'ff00ff',
      rgb: [255, 0, 255]
    }
  ];

  // ==================
  //  Color Methods
  // ==================
  var getNewColor = function(color1, color2, ratio) {
    var newColor = [0, 0, 0];
    var c;
    for (c in color1) {
      newColor[c] = color1[c] + Math.round((color2[c] - color1[c]) * ratio);
    }
    return newColor;
  };

  var colorMethods = {
    hex2rgb: function(hex) {
      var result = colorMethods.hex2array(hex);
      return 'rgb(' + result.join(',') + ')';
    },
    hex2array: function(hex) {
      // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      if (result) {
        return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
      }
      return null;
    },
    rgb2hex: function(rgb) {
      var array = rgb.substring('rgb('.length, rgb.length - 1).split(',');
      return colorMethods.array2hex(array);
    },
    rgb2array: function(rgb) {
      var array = rgb.substring('rgb('.length, rgb.length - 1).split(',');
      return array;
    },
    array2rgba: function(array) {
      return (
        'rgba(' +
        array[0] +
        ',' +
        array[1] +
        ',' +
        array[2] +
        ',' +
        (array[3] === undefined ? 1 : array[3] / 100) +
        ')'
      );
    },
    array2hex: function(array) {
      var r;
      var g;
      var b;

      if (
        array.length !== 3 ||
        array[0] === undefined ||
        array[1] === undefined ||
        array[2] === undefined
      ) {
        return null;
      }

      r = array[0].toString(16);
      g = array[1].toString(16);
      b = array[2].toString(16);
      return (
        '#' +
        (r.length === 1 ? '0' + r : r) +
        (g.length === 1 ? '0' + g : g) +
        (b.length === 1 ? '0' + b : b)
      );
    }
  };

  // ==================
  //  Setters
  // ==================

  var setAlpha = function(value) {
    currentColor.alpha = value;
    inputAlpha.attr('value', currentColor.alpha).val(currentColor.alpha);
  };

  var setCurrentRGB = function(value) {
    if (value.length < 3 || value.length > 4) {
      return;
    }

    currentColor.rgb[0] = value[0];
    currentColor.rgb[1] = value[1];
    currentColor.rgb[2] = value[2];
    inputRed.attr('value', currentColor.rgb[0]).val(currentColor.rgb[0]);
    inputGreen.attr('value', currentColor.rgb[1]).val(currentColor.rgb[1]);
    inputBlue.attr('value', currentColor.rgb[2]).val(currentColor.rgb[2]);

    if (value.length === 4) {
      setAlpha(value[3]);
    }
  };
  var setCurrentHex = function(value) {
    currentColor.hex = value;
    inputHex.val(value);
    setCurrentRGB(colorMethods.hex2array(value));
  };

  var setBaseRGB = function(value) {
    if (value.length < 3 || value.length > 4) {
      return;
    }

    currentBase.rgb[0] = value[0];
    currentBase.rgb[1] = value[1];
    currentBase.rgb[2] = value[2];

    setCurrentRGB(value);
  };
  var setBaseHex = function(value) {
    currentBase.hex = value;
    inputHex.attr('value', value).val(value);
    setBaseRGB(colorMethods.hex2array(value));
    setCurrentHex(value);
  };

  var setColorboxActive = function(e) {
    e.preventDefault();
    isMoving = true;
  };

  var setColorboxInactive = function(e) {
    e.preventDefault();
    isMoving = false;
  };

  // ==================
  //  Updaters
  // ==================
  var updateColorbox = function() {
    var colorWithAlpha = currentColor.rgb.slice(0);
    colorWithAlpha.push(currentColor.alpha);
    $(colorPreview).css({
      'background-color': colorMethods.array2rgba(colorWithAlpha)
    });
    $(colorAlphaSlider).css({'background-color': currentColor.hex});
    $(colorLabel).css({
      'background-color': colorMethods.array2rgba(colorWithAlpha)
    });
    $(colorbox).css({'background-color': currentBase.hex});
    Codenamic.reprint();
  };

  // ==================
  //  Interaction Callbacks
  // ==================
  var rgbsliderCallback = function(value) {
    var interval = 100 / colorWheel.length;
    var index = Math.floor(value / interval);
    var indexHigh = index + 1;
    var ratio;
    var newColor;

    if (value === 0) {
      index = 0;
    } else if (value === 100) {
      index = colorWheel.length - 1;
    }

    if (index === colorWheel.length - 1) {
      indexHigh = 0;
    }

    ratio = (value - interval * index) / interval;
    if (colorWheel[index] === undefined || colorWheel[indexHigh] === undefined) {
      return;
    }
    newColor = getNewColor(colorWheel[index].rgb, colorWheel[indexHigh].rgb, ratio);
    setBaseHex(colorMethods.array2hex(newColor));
    updateColorbox();
  };

  var alphasliderCallback = function(value) {
    setAlpha(value);
    updateColorbox();
  };

  var colorboxCallback = function(value) {
    var black = [0, 0, 0];
    var white = [255, 255, 255];
    var ratioX = (value.maxX - value.x) / value.maxX;
    var ratioY = value.y / value.maxY;
    var newColor = getNewColor(currentBase.rgb, white, ratioX);
    newColor = getNewColor(newColor, black, ratioY);
    setCurrentHex(colorMethods.array2hex(newColor));
    updateColorbox();
  };

  var moveColorboxNode = function(e) {
    var offset;
    var x;
    var y;
    var nodeCenter;
    var newPosX;
    var newPosY;
    var maxX = $(elem)
      .find('.visa-ui-colorbox')
      .width();
    var maxY = $(elem)
      .find('.visa-ui-colorbox')
      .height();
    if (isMoving) {
      e.preventDefault();
      offset = $(colorbox).offset();
      x = e.pageX - offset.left;
      y = e.pageY - offset.top;
      nodeCenter = Math.ceil(parseInt(colorboxNode.css('width'), 10) / 2);
      newPosX = x - nodeCenter;
      newPosY = y - nodeCenter;

      if (newPosX < 0) {
        newPosX = 0;
      } else if (newPosX >= maxX) {
        newPosX = maxX;
      }

      if (newPosY < 0) {
        newPosY = 0;
      } else if (newPosY >= maxY) {
        newPosY = maxY;
      }

      colorboxNode.css({
        top: newPosY,
        left: newPosX
      });
    }

    colorboxCallback({x: newPosX, y: newPosY, maxX: maxX, maxY: maxY});
  };

  // ==================
  //  Dependencies Inits
  // ==================
  new Slider($(elem).find('.visa-ui-slider.visa-ui-colorbar--colors'), rgbsliderCallback);

  new Slider($(elem).find('.visa-ui-slider.visa-ui-colorbar--alpha'), alphasliderCallback);

  new Dropdown($(elem).find('.visa-ui-colorselector-trigger'));

  // ==================
  //  Interactions
  // ==================
  colorboxNode.on('mousedown', function(e) {
    setColorboxActive(e);
    $(window).on('mousemove', function(f) {
      moveColorboxNode(f);
    });
  });

  $(window).on('mouseup', function(e) {
    if (self.isMoving) {
      setColorboxInactive(e);
      $(window).off('mousemove');
    }
  });

  $(buttonTrigger).on('click', function() {
    if ($(buttonTrigger).attr('aria-expanded') === 'true') {
      return;
    }
    $(this)
      .find('i')
      .html('keyboard_arrow_up');
    $('.visa-ui-panel-curtain').on('click', function() {
      if ($(buttonTrigger).attr('aria-expanded') === 'false') {
        return;
      }
      $(buttonTrigger)
        .find('i')
        .html('keyboard_arrow_down');
    });
  });
};

$(document).ready(function() {
  setTimeout(function() {
    new window.Colorselector($('#colorselector-example .visa-ui-colorselector'));
  }, 10);
  Codenamic.add('colorselector-example');
});

/*
//  visa-ui-datagrid
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */
/* global Dropdown */

$(document).ready(function() {
  var arrowUp =
    '<svg class="visa-ui-icon--tiny" data-sort="descending"><use href="#sortable-descending--tiny"></use></svg>';
  var arrowDown =
    '<svg class="visa-ui-icon--tiny" data-sort="ascending"><use href="#sortable-ascending--tiny"></use></svg>';
  var arrowSorts = '<svg class="visa-ui-icon--tiny"><use href="#sortable--tiny"></use></svg>';

  var headerClick = function(elem) {
    var row = $(elem)
      .parent()
      .parent();
    var header = $(elem).parent();
    var sort = header.attr('aria-sort');

    row.find('.visa-ui-datagrid-header--sort').html(arrowSorts);
    row.find('th').attr('aria-sort', 'none');

    if (sort === 'ascending') {
      header.attr('aria-sort', 'descending');
      $(elem)
        .find('.visa-ui-datagrid-header--sort')
        .html(arrowDown);
    } else {
      header.attr('aria-sort', 'ascending');
      $(elem)
        .find('.visa-ui-datagrid-header--sort')
        .html(arrowUp);
    }

    Codenamic.reprint();
  };

  var rowSelect = function(row) {
    row.addClass('visa-ui-state--selected');
  };

  var rowDeselect = function(row) {
    row.removeClass('visa-ui-state--selected');
  };

  Codenamic.add('datagrid-example');

  new Dropdown('button[data-dropdown="#datagrid-dropdown"]');

  $('.visa-ui-datagrid-header')
    .on('click', function() {
      var isSortable = $(this).hasClass('visa-ui-state--sortable');
      if (isSortable) {
        headerClick(this);
      }
    })
    .on('keyup', function(e) {
      if (e.which === 13) {
        headerClick(this);
      }
    });

  $('.visa-ui-datagrid thead .visa-ui-checkbox-label').on('click', function() {
    var self = this;
    var checked;
    var checkmark;
    setTimeout(function() {
      checked = $(self)
        .parent()
        .find('.visa-ui-checkbox')
        .is(':checked');
      $(self)
        .parent()
        .parent()
        .parent()
        .parent()
        .find('tbody')
        .find('tr')
        .each(function(i, e) {
          checkmark = $(e).find('.visa-ui-checkbox');
          if (checked) {
            rowSelect($(e));
            if (!checkmark.is(':checked')) {
              $(e)
                .find('.visa-ui-checkbox-label')
                .click();
            }
          } else {
            rowDeselect($(e));
            if (checkmark.is(':checked')) {
              $(e)
                .find('.visa-ui-checkbox-label')
                .click();
            }
          }
        });
      // Codenamic.reprint();
    }, 50);
  });

  $('.visa-ui-datagrid tbody .visa-ui-checkbox-label').on('click', function() {
    var table = $(this)
      .parent()
      .parent()
      .parent()
      .parent();
    var active;
    var self = this;

    setTimeout(function() {
      active = table.find('tbody .visa-ui-checkbox:checked');
      if (active.length === table.find('tbody .visa-ui-checkbox').length) {
        table
          .find('thead .visa-ui-checkbox')
          .removeAttr('checked')
          .attr('checked', 'checked');
      } else {
        table.find('thead .visa-ui-checkbox').removeAttr('checked');
      }

      if (
        $(self)
          .parent()
          .find('.visa-ui-checkbox')
          .is(':checked')
      ) {
        rowSelect(
          $(self)
            .parent()
            .parent()
        );
      } else {
        rowDeselect(
          $(self)
            .parent()
            .parent()
        );
      }
    }, 50);

    // Codenamic.reprint();
  });

  $('#datagrid-dropdown-button').on('click', function() {
    // setTimeout(function() {
    //   Codenamic.reprint();
    // }, 10);
  });
});

// $(window).on('scroll', function() {

//     $('.visa-ui-datagrid').each(function(i,e) {
//         var headerIsFixed = $(e).hasClass('fixed'),
//             scrollIsOnDatagrid = $(window).scrollTop()+getFullHeight($(e).data().header)
//               >$(e).offset().top,
//             scrollIsPastDatagrid = $(window).scrollTop()+getFullHeight($(e).data().header)+
//               getFullHeight($(e).find('thead'))>$(e).offset().top+getFullHeight($(e));

//         if( scrollIsOnDatagrid && !scrollIsPastDatagrid ) {
//             $(e).addClass('fixed')
//             $(e).find('thead').css({
//                     top:getFullHeight($(e).data().header)
//                 });
//         } else if ( !scrollIsOnDatagrid || scrollIsPastDatagrid ) {
//             $(e).removeClass('fixed');
//             $(e).find('thead').css({
//                     top:'0px'
//                 });
//         }
//     });
// });

/*
//	visa-ui-dateselector
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */
/* global Select */

$(document).ready(function() {
  var selectDate = function(elem) {
    var component = $(elem)
      .parent()
      .parent()
      .parent()
      .parent()
      .parent()
      .parent()
      .parent();
    var day = $(elem).html();
    var value = '01/' + (day.length === 1 ? '0' + day : day) + '/2016';
    var re = /^([0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})/;
    component.find('.visa-ui-dateselector--date').removeClass('visa-ui-state--active');
    $(elem).addClass('visa-ui-state--active');

    component.find('.visa-ui-select-value').html(value);
    if (re.test(value)) {
      component.addClass('visa-ui-state--success').removeClass('visa-ui-state--error');
      component
        .find('use[href="#checkmark--low"]')
        .parent()
        .parent()
        .removeClass('visa-ui-state--hidden');
      component
        .find('use[href="#error--low"]')
        .parent()
        .parent()
        .addClass('visa-ui-state--hidden');
    } else {
      component.addClass('visa-ui-state--error').removeClass('visa-ui-state--success');
      component
        .find('use[href="#error--low"]')
        .parent()
        .parent()
        .removeClass('visa-ui-state--hidden');
      component
        .find('use[href="#checkmark--low"]')
        .parent()
        .parent()
        .addClass('visa-ui-state--hidden');
    }

    component.addClass('visa-ui-state--filled');
    setTimeout(function() {
      component.find('.visa-ui-panel-curtain').click();
    }, 100);
    Codenamic.reprint();
  };

  Codenamic.add('dateselector-example');

  new Select('#dateselector-example .visa-ui-select');

  $('#dateselector-example .visa-ui-select').on('click', function() {
    Codenamic.reprint();
  });

  $('.visa-ui-dateselector .visa-ui-dateselector--date')
    .on('click', function() {
      selectDate($(this));
    })
    .on('focus', function() {
      var elem = $(this);
      $(this).on('keyup', function(e) {
        if (e.which === 13) {
          selectDate(elem);
        }
      });
    });
});

/*
//	visa-ui-dots
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('visa-ui-dot-example--message');
  Codenamic.add('visa-ui-dot-example--comment');

  $('#visa-ui-messenger-checkbox')
    .parent()
    .find('.visa-ui-checkbox-label')
    .on('click', function() {
      $('.visa-ui-dot--message').toggleClass('visa-ui-state--disabled');

      Codenamic.reprint();
    });

  $('#visa-ui-comment-checkbox')
    .parent()
    .find('.visa-ui-checkbox-label')
    .on('click', function() {
      $('.visa-ui-dot--comment').toggleClass('visa-ui-state--disabled');

      Codenamic.reprint();
    });
});

/*
//  visa-ui-dropdown
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */
/* global Utils */

window.Dropdown = function(node) {
  var self = this;
  self.node = node;
  self.panel = '[class^="visa-ui-panel"]' + $(node).attr('data-dropdown');
  self.curtain = $(self.panel)
    .parent()
    .find('.visa-ui-panel-curtain');
  self.open = false;

  self.dropdown =
    '<svg class="visa-ui-icon"><use href="#dropdown--low" xlink:href="#dropdown--low"></use></svg>';
  self.dropup =
    '<svg class="visa-ui-icon"><use href="#dropdown-up--low" xlink:href="#dropdown-up--low"></use></svg>';

  self.init = function() {
    $(self.node)
      .on('click', function() {
        self.show();
      })
      .on('keydown', function(e) {
        if (e.which === 13) {
          e.preventDefault();
          e.stopPropagation();
          if (!self.open) {
            self.show();
          } else {
            self.hide();
          }
        } else if (e.which === 27) {
          self.hide();
        }
      });

    $(self.panel)
      .find('li.visa-ui-listbox--item')
      .on('click', function() {
        if ($(this).find('.visa-ui-checkbox').length > 0) {
          return;
        }

        self.hide();
      });

    $(self.panel)
      .find('.visa-ui-btn-text.visa-ui-btn-text--tertiary')
      .on('click', function() {
        self.hide();
      });
  };

  self.show = function() {
    var x = $(self.node).offset().left;
    var y = $(self.node).offset().top;
    var w = Utils.getFullWidth($(self.node));
    var h = Utils.getFullHeight($(self.node));
    var align = $(self.panel).attr('data-align');
    self.open = true;

    switch (align) {
      case 'right':
        y += h;
        x -= Utils.getFullWidth($(self.panel)) - w;
        break;
      default:
      case 'left':
        y += h;
        // x = x;
        break;
    }

    $(self.node).attr('aria-expanded', 'true');

    $(self.panel)
      .addClass('visa-ui-panel--show')
      .css({
        top: y,
        left: x
      });
    $(self.curtain)
      .addClass('visa-ui-panel--show')
      .on('click', function() {
        self.hide();
        $(self.curtain).off('click');
      });

    if ($(self.node).hasClass('visa-ui-btn-split')) {
      $(self.node)
        .find('.visa-ui-icon')
        .parent()
        .html(self.dropup);
    }

    Codenamic.reprint();
  };

  self.hide = function() {
    self.open = false;
    $(self.node).attr('aria-expanded', 'false');
    $(self.panel).removeClass('visa-ui-panel--show');
    $(self.curtain).removeClass('visa-ui-panel--show');

    if ($(self.node).hasClass('visa-ui-btn-split')) {
      $(self.node)
        .find('.visa-ui-icon')
        .parent()
        .html(self.dropdown);
    }

    Codenamic.reprint();
  };

  $(document).ready(function() {
    self.init();
  });
};

$(document).ready(function() {
  var type;

  Codenamic.add('dropdown-example');
  Codenamic.add('dropdown-checkbox');

  new window.Dropdown('button#default-dropdown-example');
  new window.Dropdown('button#dropdown-with-checkbox');

  $('.visa-ui-radio-group#dropdown-align .visa-ui-radio-label').on('click', function() {
    type = $(this)
      .html()
      .toLowerCase();

    if (type === 'left (default)') {
      $('#dropdown-example .visa-ui-btn-group').removeClass('visa-ui-btn-group--right');
      $('#dropdown-example .visa-ui-panel--absolute').attr('data-align', 'left');
    } else {
      $('#dropdown-example .visa-ui-btn-group').addClass('visa-ui-btn-group--right');
      $('#dropdown-example .visa-ui-panel--absolute').attr('data-align', 'right');
    }

    Codenamic.reprint();
  });
});

/*
//  visa-ui-footer
//  component logic
//
//  @author sacuna
*/

$(document).ready(function() {});

/*
//  visa-ui-grid
//  component logic
//
//  @author sacuna
*/

$(document).ready(function() {});

/*
//  visa-ui-icon
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  var isIconPage = window.location.href.indexOf('visa-ui-icon') >= 0;
  var iconRes = 'icon-resolution-low';

  var generateIcons = function() {
    var container = $('#icon-icons');
    var rowFirst;
    var rowCount;
    var rowBreak;
    var row;

    var createRow = function(marginTop) {
      var row = $(document.createElement('div'));
      row.attr('class', 'row' + (marginTop ? ' styleguide-margin-top' : ''));
      return row;
    };

    var createSVG = function(name) {
      var res = iconRes.substring(iconRes.lastIndexOf('-'));
      var className = 'visa-ui-icon' + (res === '-low' ? '' : '-' + res);
      return (
        '<svg class="' +
        className +
        '"><use href="#' +
        name +
        '" xlink:href="#' +
        name +
        '"/></svg>'
      );
    };

    var createItem = function(name) {
      var col = $(document.createElement('div'));
      var svg = createSVG(name);
      var div = $(document.createElement('div'));
      var button = $(document.createElement('button'));

      button.addClass('visa-ui-btn-link--tertiary');
      button.attr('role', 'button');
      button.append(name);

      button.on('click', function() {
        var icon = $(this).html();
        var code = $('#icon-code-example');
        var svg = createSVG(icon);

        code.html(svg);

        Codenamic.reprint();
      });

      div.append(button);

      col.addClass('col--sm-1');
      col.append(svg);
      col.append(div);

      return col;
    };

    container.html('');
    rowFirst = true;
    rowCount = 0;

    $('.visa-ui-icons')
      .find('symbol')
      .each(function(i, e) {
        var id = $(e).attr('id');
        var needle = iconRes.substring(iconRes.lastIndexOf('-'));

        if (id.indexOf(needle) > 0) {
          rowBreak = rowCount % 4 === 0;

          if (rowBreak) {
            row = createRow(!rowFirst);
            container.append(row);
          }

          row.append(createItem(id));
          rowCount += 1;
          rowFirst = false;
        }
      });
  };

  Codenamic.add('icon-code-example');

  if (isIconPage) {
    generateIcons();
  }

  $('#icon-resolution .visa-ui-radio-label').on('click', function() {
    var icons = $('#icon-icons').find('[class^="visa-ui-icon"]');
    iconRes = $(this).attr('for');

    switch (iconRes) {
      case 'icon-resolution-high':
        icons
          .removeClass('visa-ui-icon')
          .removeClass('visa-ui-icon--tiny')
          .addClass('visa-ui-icon--high');
        break;
      case 'icon-resolution-tiny':
        icons
          .removeClass('visa-ui-icon--high')
          .removeClass('visa-ui-icon')
          .addClass('visa-ui-icon--tiny');
        break;
      case 'icon-resolution-low':
      default:
        icons
          .removeClass('visa-ui-icon--high')
          .removeClass('visa-ui-icon--tiny')
          .addClass('visa-ui-icon');
        break;
    }

    generateIcons();
  });
});

/*
//	visa-ui-help
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  if ($('#help-hidden-example').length > 0) {
    Codenamic.add('help-hidden-example');
    Codenamic.reprint();
  }

  $('.visa-ui-help-qa-title').on('click', function() {
    var answer = $(this).siblings('.visa-ui-help-qa-answer');
    if (answer.hasClass('visa-ui-help-qa-answer--open')) {
      answer.removeClass('visa-ui-help-qa-answer--open');
      $(this)
        .find('.visa-ui-btn-icon--secondary')
        .find('.visa-ui-icon')
        .html('keyboard_arrow_down');
    } else {
      answer.addClass('visa-ui-help-qa-answer--open');
      $(this)
        .find('.visa-ui-btn-icon--secondary')
        .find('.visa-ui-icon')
        .html('keyboard_arrow_up');
    }
  });

  $('.visa-ui-help-qa-see-more').on('click', function() {
    var sentence = $(this).siblings('.visa-ui-help-qa-sentence');
    if (sentence.hasClass('visa-ui-help-qa-sentence--open')) {
      sentence.removeClass('visa-ui-help-qa-sentence--open');
    } else {
      sentence.addClass('visa-ui-help-qa-sentence--open');
    }
  });
});

/*
//  visa-ui-input
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

window.Input = function(elem) {
  // var self = this;

  var input;
  var content;
  var linesize;
  var multiline = false;
  var multilineHeight;

  if ($(elem).length === 0) {
    return;
  }

  if ($(elem).find('input').length > 0) {
    input = $(elem).find('input');
  } else if ($(elem).find('textarea').length > 0) {
    input = $(elem).find('textarea');
    multiline = true;
  } else {
    throw 'visa-ui-input must have an input[type="text"] or textarea tag';
  }

  content = $(input).val();

  if (multiline) {
    linesize = $(document.createElement('div'));
    linesize.addClass('visa-ui-input-linesize');
    linesize.attr('id', elem.attr('id') + '-linesize');
    linesize.width(elem.width());
    $('body').append(linesize);
  }

  $(elem).on('click', function() {
    $(this)
      .find('input')
      .focus();
    $(this)
      .find('textarea')
      .focus();
  });

  $(input)
    .on('focus', function(e) {
      if ($(elem).hasClass('visa-ui-state--readonly')) {
        e.preventDefault();
      }

      $(elem).addClass('visa-ui-state--focus');
      Codenamic.reprint();
    })
    .on('focusout', function() {
      var re = /^(([^<>()[\]\\.,;:\s@\\"]+(\.[^<>()[\]\\.,;:\s@\\"]+)*)|(\\".+\\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      var valid;
      var inputBar;

      $(elem).removeClass('visa-ui-state--focus');

      // validation
      if ($(input).attr('type') === 'email') {
        inputBar = $(elem).find('.visa-ui-input-bar');
        valid = re.test($(this).val());

        if (valid) {
          $(elem)
            .addClass('visa-ui-state--success')
            .removeClass('visa-ui-state--error');
          $(inputBar)
            .find('.visa-ui-icon')
            .parent()
            .removeClass('visa-ui-state--hidden');
          $(elem)
            .find('.visa-ui-input-message')
            .addClass('visa-ui-state--hidden')
            .html('Email must be valid format.');
        } else {
          $(elem)
            .addClass('visa-ui-state--error')
            .removeClass('visa-ui-state--success');
          $(inputBar)
            .find('.visa-ui-icon[data-icon="success"]')
            .parent()
            .addClass('visa-ui-state--hidden');
          $(elem)
            .find('.visa-ui-input-message')
            .removeClass('visa-ui-state--hidden')
            .html(
              '<svg class="visa-ui-icon"><use href="#error--low" xlink:href="#error--low"></use></svg> Invalid email address.'
            );
        }
      }

      Codenamic.reprint();
    })
    .on('keydown', function() {
      var line;

      // input keyup
      if ($(input).val() !== undefined && $(input).val().length > 0) {
        $(elem).addClass('visa-ui-state--filled');
      } else {
        $(elem).removeClass('visa-ui-state--filled');
      }

      // default content
      if ($(elem).hasClass('visa-ui-state--content')) {
        if ($(input).val() !== content) {
          $(elem).removeClass('visa-ui-state--content');
        }
      }

      $(input).attr('value', $(this).val());

      if (multiline) {
        line = $(this)
          .val()
          .replace('/\\s/g', '&nbsp;')
          .replace(/\n/g, '<br>');
        linesize.html(line);
        input.height(Math.round($(linesize).height()));
        $(elem)
          .find('.visa-ui-input-count-number')
          .html(350 - $(this).val().length);
      }

      Codenamic.reprint();
    })
    .on('mousedown', function() {
      multilineHeight = input.height();
    })
    .on('mouseup', function() {
      if (input.height() !== multilineHeight) {
        multiline = false;
        $(elem).addClass('visa-ui-state--manual-resize');
        Codenamic.reprint();
      }
    });
};

$(document).ready(function() {
  var inputContentFlag = false;
  // Codenamic.add('input-textarea');
  //
  // new window.Input($('#input-validation .visa-ui-input'));
  // new window.Input($('#input-textarea .visa-ui-input'));

  Codenamic.add('input-example-container');
  Codenamic.add('input-email-container');
  Codenamic.add('input-textarea-container');

  new window.Input($('#input-example-container .visa-ui-input'));
  new window.Input($('#input-email-container .visa-ui-input'));
  new window.Input($('#input-textarea-container .visa-ui-input'));

  $('#input-state-test .visa-ui-radio-label').on('click', function() {
    var element = $('#input-example-container .visa-ui-input');
    var state = $(this)
      .html()
      .toLowerCase();

    inputContentFlag =
      element.find('input').val() === undefined || element.find('input').length <= 0;

    element
      .find('input')
      .removeAttr('readonly')
      .removeAttr('disabled');

    switch (state) {
      case 'pre-filled':
        state = 'visa-ui-state--content';

        if (!inputContentFlag) {
          element.removeClass('visa-ui-state--filled');
          element.find('input').attr('value', 'Hello World!');
        }

        break;
      case 'read-only':
        state = 'visa-ui-state--readonly';
        element.find('input').attr('readonly', true);

        if (!inputContentFlag) {
          element.addClass('visa-ui-state--filled');
          element.find('input').attr('value', 'Hello World!');
        }

        break;
      case 'disabled':
        state = 'visa-ui-state--disabled';
        element.find('input').attr('disabled', true);
        break;
      case 'default':
      default:
        state = '';

        if (!inputContentFlag) {
          element.addClass('visa-ui-state--filled');
        }

        break;
    }

    element
      .removeClass('visa-ui-state--content')
      .removeClass('visa-ui-state--readonly')
      .removeClass('visa-ui-state--disabled')
      .addClass(state);

    Codenamic.reprint();
  });

  $('#textarea-state-test .visa-ui-radio-label').on('click', function() {
    var element = $('#input-textarea-container .visa-ui-input');
    var state = $(this)
      .html()
      .toLowerCase();

    inputContentFlag =
      element.find('textarea').val() === undefined || element.find('textarea').length <= 0;

    element
      .find('textarea')
      .removeAttr('readonly')
      .removeAttr('disabled');

    switch (state) {
      case 'pre-filled':
        state = 'visa-ui-state--content';

        if (!inputContentFlag) {
          element.removeClass('visa-ui-state--filled');
          element.find('textarea').val('Hello World!');
        }

        break;
      case 'read-only':
        state = 'visa-ui-state--readonly';
        element.find('textarea').attr('readonly', true);

        if (!inputContentFlag) {
          element.addClass('visa-ui-state--filled');
          element.find('textarea').val('Hello World!');
        }

        break;
      case 'disabled':
        state = 'visa-ui-state--disabled';
        element.find('textarea').attr('disabled', true);
        break;
      case 'default':
      default:
        state = '';

        if (!inputContentFlag) {
          element.addClass('visa-ui-state--filled');
        }

        break;
    }

    element
      .removeClass('visa-ui-state--content')
      .removeClass('visa-ui-state--readonly')
      .removeClass('visa-ui-state--disabled')
      .addClass(state);

    Codenamic.reprint();
  });

  $('#textarea-resize-test .visa-ui-radio').on('click', function() {
    var resize = $(this)
      .find('.visa-ui-radio-label')
      .html()
      .toLowerCase();
    switch (resize) {
      case 'no resize':
        resize = 'visa-ui-resize--none';
        break;
      case 'vertical resize only':
        resize = 'visa-ui-resize--vertical';
        break;
      case 'horizontal resize only':
        resize = 'visa-ui-resize--horizontal';
        break;
      default:
      case 'default':
        resize = '';
        break;
    }

    $('#input-textarea textarea').attr('class', resize);

    Codenamic.reprint();
  });
});

/*
//  visa-ui-linktabs
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('linktabs-example');

  $('.visa-ui-linktabs li').on('click', function() {
    $(this)
      .parent()
      .find('li')
      .removeClass('visa-ui-state--active')
      .attr('aria-selected', 'false');
    $(this)
      .addClass('visa-ui-state--active')
      .attr('aria-selected', 'true');

    Codenamic.reprint();
  });
});

/*
//  visa-ui-listbox
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('listbox-simple');
  Codenamic.add('listbox-selection');
});

/*
//  visa-ui-modal
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  var escapeKeyCode = 27;
  var tabKeyCode = 9;
  var inputs = $('.visa-ui-modal-card').find('.visa-ui-modal-card--tabulate');
  var firstInput = inputs.first();
  var lastInput = inputs.last();

  var hideModal = function() {
    $('[class^="visa-ui-modal"]').removeClass('visa-ui-state--show');
    $('[data-modal]').focus();
    Codenamic.reprint();
  };

  var showModal = function(element) {
    var id = $(element).attr('data-modal');
    var modal = '[class^="visa-ui-modal"]#' + id;
    $(modal).addClass('visa-ui-state--show');
    $('.visa-ui-modal-exit').on('click', function() {
      hideModal();
    });
    Codenamic.reprint();
  };

  Codenamic.add('modal-example');

  lastInput.on('keydown', function(e) {
    if (e.which === tabKeyCode && !e.shiftKey && $('this:focus')) {
      e.preventDefault();
      firstInput.focus();
    }
  });

  firstInput.on('keydown', function(e) {
    if (e.which === tabKeyCode && e.shiftKey && $('this:focus')) {
      e.preventDefault();
      lastInput.focus();
    }
  });

  $('.visa-ui-modal').keyup(function(e) {
    if (e.keyCode === escapeKeyCode) {
      if (document.getElementsByClassName('visa-ui-state--show').length > 0) {
        hideModal();
      }
    }
  });

  $('[data-modal]').on('click', function() {
    showModal(this);
    setTimeout(function() {
      lastInput.focus();
    }, 50);
  });
});

/*
//  visa-ui-input
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('navbar-example');
  Codenamic.add('navbar-fixed');
  Codenamic.add('navbar-absolute');
  Codenamic.add('navbar-relative');

  $('#navbar-example .visa-ui-navbar--relative').on('click', function() {
    Codenamic.reprint();
  });
});

/*
//  visa-ui-pagination
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

window.Pagination = function(elem) {
  var self = this;
  var pages = 20;
  var windowSize = 6;
  var windowNow = 1;
  var current = 0;
  this.goToFirst = $(elem).find('.visa-ui-pagination-control--first');
  this.goToLast = $(elem).find('.visa-ui-pagination-control--last');
  this.goToPrev = $(elem).find('.visa-ui-pagination-control--previous');
  this.goToNext = $(elem).find('.visa-ui-pagination-control--next');

  this.generatePage = function(number) {
    var element = $(document.createElement('li'));
    var button = $(document.createElement('button'));
    var span = $(document.createElement('span'));

    span.attr('class', 'visa-ui-btn--label');
    span.html(number);

    button.attr('type', 'button');
    button.attr('aria-label', 'page ' + number);
    button.attr('class', 'visa-ui-btn-icon--secondary');

    element.attr('class', 'visa-ui-pagination-page');

    if (number === current) {
      button.attr('disabled', 'disabled');
      element.class('visa-ui-state--active');
    }

    button.append(span);
    element.append(button);

    return element;
  };

  this.calculateWindow = function() {
    var lowerLimit;
    var upperLimit;
    windowNow = Math.floor(current / windowSize) + 1;
    lowerLimit = windowSize * (windowNow - 1);
    upperLimit = windowSize * windowNow;

    if (current >= upperLimit) {
      lowerLimit = windowSize * (windowNow - 1);
      upperLimit = windowSize * windowNow;
    }

    if (upperLimit >= pages - 1) {
      upperLimit = pages;
      lowerLimit = upperLimit - windowSize;
    }

    return [lowerLimit, upperLimit];
  };

  this.displayPages = function() {
    var windowLimits = self.calculateWindow();
    var lowerLimit = windowLimits[0];
    var upperLimit = windowLimits[1];
    var page;
    var element;

    $(elem)
      .find('.visa-ui-pagination-page')
      .addClass('visa-ui-state--hidden');
    $(elem)
      .find('.visa-ui-pagination-page.visa-ui-state--active')
      .removeClass('visa-ui-state--active')
      .find('button')
      .removeAttr('disabled');
    $(
      $(elem)
        .find('.visa-ui-pagination-page')
        .get(0)
    )
      .next()
      .addClass('visa-ui-state--hidden');
    $(
      $(elem)
        .find('.visa-ui-pagination-page')
        .get(pages - 1)
    )
      .prev()
      .addClass('visa-ui-state--hidden');

    if (upperLimit >= pages - 1) {
      $(
        $(elem)
          .find('.visa-ui-pagination-page')
          .get(0)
      ).removeClass('visa-ui-state--hidden');
      $(
        $(elem)
          .find('.visa-ui-pagination-page')
          .get(0)
      )
        .next()
        .removeClass('visa-ui-state--hidden');
    }

    for (page = lowerLimit; page < upperLimit; page++) {
      element = $(
        $(elem)
          .find('.visa-ui-pagination-page')
          .get(page)
      );
      element.removeClass('visa-ui-state--hidden');
      if (page === current) {
        element.addClass('visa-ui-state--active');
        element.find('button').attr('disabled', 'disabled');
      }
    }

    if (upperLimit < pages - 1) {
      $(
        $(elem)
          .find('.visa-ui-pagination-page')
          .get(pages - 1)
      ).removeClass('visa-ui-state--hidden');
      $(
        $(elem)
          .find('.visa-ui-pagination-page')
          .get(pages - 1)
      )
        .prev()
        .removeClass('visa-ui-state--hidden');
    }
  };

  this.updateCurrent = function(value) {
    current = value;
    if (current >= pages - 1) {
      $('.visa-ui-pagination-control--last').attr('disabled', 'disabled');
      $('.visa-ui-pagination-control--next').attr('disabled', 'disabled');
    } else {
      $('.visa-ui-pagination-control--last').removeAttr('disabled');
      $('.visa-ui-pagination-control--next').removeAttr('disabled');
    }

    if (current === 0) {
      $('.visa-ui-pagination-control--first').attr('disabled', 'disabled');
      $('.visa-ui-pagination-control--previous').attr('disabled', 'disabled');
    } else {
      $('.visa-ui-pagination-control--first').removeAttr('disabled');
      $('.visa-ui-pagination-control--previous').removeAttr('disabled');
    }

    self.displayPages();

    Codenamic.reprint();
  };

  this.init = function() {
    self.displayPages();
  };

  $(this.goToFirst).on('click', function() {
    self.updateCurrent(0);
  });

  $(this.goToLast).on('click', function() {
    self.updateCurrent(pages - 1);
  });

  $(this.goToNext).on('click', function() {
    if (current + 1 < pages) {
      self.updateCurrent(current + 1);
    }
  });

  $(this.goToPrev).on('click', function() {
    if (current - 1 >= 0) {
      self.updateCurrent(current - 1);
    }
  });

  $(elem)
    .find('.visa-ui-pagination-page')
    .on('click', function() {
      self.updateCurrent(
        parseInt(
          $(this)
            .find('span.visa-ui-btn--label')
            .html(),
          10
        ) - 1
      );
    });

  self.init();
};

$(document).ready(function() {
  new window.Pagination($('#numeric-pagination-example .visa-ui-pagination'));
  Codenamic.add('numeric-pagination-example');
});

/*
//  visa-ui-panel
//  component logic
//
//  @author sacuna
*/

$(document).ready(function() {});

/*
//  visa-ui-progressbar
//  component logic
//
//  @author sacuna
*/

$(document).ready(function() {});

/*
//  visa-ui-radio
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('radio-example');
});

/*
//  visa-ui-search
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

window.Search = function(elem) {
  var dropdown = $(elem).find('.visa-ui-panel--absolute');
  var curtain = $(elem).find('.visa-ui-panel-curtain');
  var showingDropdown = false;

  var showSuggestionDropdown = function() {
    if (showingDropdown) {
      return;
    }
    showingDropdown = true;
    $(dropdown).addClass('visa-ui-panel--show');
    $(curtain).addClass('visa-ui-panel--show');

    $(elem)
      .find('.visa-ui-listbox--item')
      .on('click', function() {
        var input = $(elem).find('input');
        var content = $(elem)
          .find('.visa-ui-listbox--item-container')
          .html();
        $(input).attr('value', content);
      });
  };

  var hideSuggestionDropdown = function() {
    if (!showingDropdown) {
      return;
    }
    showingDropdown = false;
    $(dropdown).removeClass('visa-ui-panel--show');
    $(curtain).removeClass('visa-ui-panel--show');
    $(elem)
      .find('.visa-ui-listbox--item')
      .off('click');
  };

  var init = function() {
    $(document).ready(function() {
      new window.Input($(elem).find('.visa-ui-input'));
      $(elem)
        .find('.visa-ui-input input')
        .on('blur', function() {
          hideSuggestionDropdown();
          Codenamic.reprint();
        })
        .on('keyup', function() {
          var value = $(this).val();
          if (value.length > 0) {
            showSuggestionDropdown();
          } else {
            hideSuggestionDropdown();
          }
          Codenamic.reprint();
        });
    });
  };

  if ($(elem).length === 0) {
    return;
  }

  init();
};

$(document).ready(function() {
  new window.Search($('#search-example .visa-ui-search'));
  new window.Search($('#search-example-big .visa-ui-search--big'));

  Codenamic.add('search-example');
});

/*
//  visa-ui-select
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */
/* global Utils */

window.Select = function(node) {
  var self = this;
  self.node = node;
  // self.select = $(self.node);
  self.input = $(self.node).find('.visa-ui-select-input');
  self.value = $(self.input).find('.visa-ui-select-value');
  self.items = $(self.node).find('.visa-ui-listbox--item');
  self.panelId = $(self.node)
    .find('.visa-ui-select-bar')
    .attr('data-dropdown');
  self.panel = '[class^="visa-ui-panel"]' + self.panelId;
  self.curtain = $(self.node).find('.visa-ui-panel-curtain');
  self.open = false;
  self.selected = {};

  if ($(node).length === 0) {
    return;
  }

  self.init = function() {
    $(self.node)
      .on('focus', function() {
        $(this).addClass('visa-ui-state--focus');
        $(this)
          .off('keyup')
          .on('keyup', function(e) {
            if (e.which === 13) {
              if (!self.open) {
                self.input.click();
              } else {
                self.hide();
              }
            }
          });
      })
      .on('blur', function() {
        if (!self.open) {
          $(this).removeClass('visa-ui-state--focus');
        }
      });

    self.input
      .on('click', function() {
        self.show();
      })
      .on('focus', function() {
        $(this).click();
      });

    // selecting multiple items
    $(node)
      .find('.visa-ui-checkbox-label')
      .each(function(i, elem) {
        $(elem).on('click', function() {
          self.select($(elem));
        });
      });
  };

  self.show = function() {
    var h = Utils.getFullHeight($(self.node));
    self.open = true;

    $(self.node)
      .find('.visa-ui-listbox--item:first')
      .focus();
    $(self.node).attr('aria-expanded', 'true');
    $(self.node)
      .find('.visa-ui-panel-curtain')
      .addClass('visa-ui-panel--show')
      .on('click', function() {
        self.hide();
      });
    $(self.panel)
      .addClass('visa-ui-panel--show')
      .css({
        top: h,
        left: 0
      });

    $(self.items).each(function(i, elem) {
      $(elem)
        .on('click', function() {
          $(elem).off('click');
          if ($(elem).find('.visa-ui-checkbox').length > 0) {
            return;
          }
          self.selectItem($(elem));
        })
        .on('keyup', function(e) {
          if (e.which === 13) {
            $(elem).click();
            $(elem).off('keyup');
          }
        });
    });

    Codenamic.reprint();
  };

  self.hide = function() {
    self.open = false;
    $(self.node).attr('aria-expanded', 'false');
    $(self.node).removeClass('visa-ui-state--focus');
    $(self.panel).removeClass('visa-ui-panel--show');
    $(self.curtain).removeClass('visa-ui-panel--show');
    Codenamic.reprint();
  };

  self.selectItem = function(item) {
    var string = $(item)
      .find('.visa-ui-listbox--item-container')
      .html()
      .trim();
    self.selected[self.panelId] = [string];
    $(self.value).html(self.selected[self.panelId].join(', '));

    if (self.selected[self.panelId] !== undefined && self.selected[self.panelId].length > 0) {
      $(self.node).addClass('visa-ui-state--filled');
    } else {
      $(self.node).removeClass('visa-ui-state--filled');
    }

    $(self.node)
      .find('.visa-ui-panel-curtain')
      .click();
  };

  self.select = function(elem) {
    // var panel = self.panel;
    var panelId = self.panelId;
    var parent = self.node;
    var found = false;
    var value = $(elem)
      .html()
      .trim();
    var k;

    if (self.selected[panelId] === undefined) {
      self.selected[panelId] = [];
    }

    for (k in self.selected[panelId]) {
      found = self.selected[panelId][k] === value;
      if (found) {
        self.selected[panelId].splice(k, 1);
        break;
      }
    }

    if (!found) {
      self.selected[panelId].push(value);
    }

    $($(parent).find('.visa-ui-select-value')).html(self.selected[panelId].join(', '));
    if (self.selected[panelId] !== undefined && self.selected[panelId].length > 0) {
      $(parent).addClass('visa-ui-state--filled');
    } else {
      $(parent).removeClass('visa-ui-state--filled');
    }

    Codenamic.reprint();
  };

  $(document).ready(function() {
    self.init();
  });
};

$(document).ready(function() {
  Codenamic.add('select-example');
  Codenamic.add('select-disabled');
  Codenamic.add('select-multi');

  new window.Select('#select-example .visa-ui-select');
  new window.Select('#select-multi .visa-ui-select');
  new window.Input('#select-multi .visa-ui-select .visa-ui-input');
});

/*
//	visa-ui-sidepanel
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

window.SidePanel = function(node) {
  var self = this;
  self.node = node;
  self.summoner = $(node).find('.visa-ui-sidepanel-summoner');
  self.panel = $(node).find('.visa-ui-sidepanel-panel');
  self.content = $(node).find('visa-ui-sidepanel-content');
  self.deactivator = $(self.summoner).find('.visa-ui-sidepanel-deactivator');
  self.activator = $(self.summoner).find('.visa-ui-sidepanel-activator');
  self.trigger = $(node).find('.visa-ui-help-trigger');
  self.expand = $(node).find('.visa-ui-help-expand');
  self.isOpen = false;

  self.dropdown =
    '<svg class="visa-ui-icon"><use href="#dropdown--low" xlink:href="#dropdown--low"></use></svg>';
  self.dropup =
    '<svg class="visa-ui-icon"><use href="#dropdown-up--low" xlink:href="#dropdown-up--low"></use></svg>';

  if ($(node).length === 0) {
    return;
  }

  self.determineContentWidth = function() {
    if ($('.visa-ui-grid').width() + 422 >= $(window).width()) {
      $('.visa-ui-content').addClass('visa-ui-state--shrink');
    } else {
      $('.visa-ui-content').removeClass('visa-ui-state--shrink');
    }
  };

  self.openPanel = function(panel) {
    $(self.node)
      .addClass('visa-ui-state--open')
      .removeClass('visa-ui-state--close');
    $('.visa-ui-sidepanel-content').removeClass('visa-ui-state--show');
    $('.visa-ui-sidepanel-content#panel-' + $(panel).data('panel')).addClass('visa-ui-state--show');
    self.determineContentWidth();
  };

  self.closePanel = function() {
    $(self.node)
      .addClass('visa-ui-state--close')
      .removeClass('visa-ui-state--open');
    $('.visa-ui-content').removeClass('visa-ui-state--shrink');
    $(self.content).removeClass('visa-ui-state--show');
  };

  self.init = function() {
    self.panel.css('height', 'calc(100vh - ' + $('.visa-ui-viewport').css('margin-top') + ')');

    self.activator.on('click', function() {
      // console.log('openPanel!');
      self.openPanel($(this));
      self.isOpen = true;
      Codenamic.reprint();
    });

    self.deactivator.on('click', function() {
      self.closePanel();
      self.isOpen = false;
      Codenamic.reprint();
    });

    self.trigger.on('click', function() {
      var target = '#' + $(this).data('target');
      if ($(target).hasClass('visa-ui-state--expanded')) {
        $(target).removeClass('visa-ui-state--expanded');
        $(this)
          .find('.visa-ui-icon')
          .html(self.dropdown);
      } else {
        $(target).addClass('visa-ui-state--expanded');
        $(this)
          .find('.visa-ui-icon')
          .html(self.dropup);
      }

      Codenamic.reprint();
    });

    self.expand.on('click', function() {
      var target = $('#' + $(this).data('target')).find('p');
      if ($(target).hasClass('visa-ui-state--expanded')) {
        $(target).removeClass('visa-ui-state--expanded');
        $(this).html('See more...');
      } else {
        $(target).addClass('visa-ui-state--expanded');
        $(this).html('See less...');
      }

      Codenamic.reprint();
    });

    $(window).resize(function() {
      if (self.isOpen) {
        self.determineContentWidth();
        Codenamic.reprint();
      }
    });

    new window.Search(node.find('.visa-ui-search'));
  };

  $(document).ready(function() {
    self.init();
  });
};

window.showPanelContent = function(context, content, prop) {
  var elem = $('.visa-ui-sidepanel-panel-' + content);
  if (prop) {
    $('[class^="visa-ui-sidepanel-panel"').addClass('visa-ui.state--hidden');
    $(elem).removeClass('visa-ui-state--hidden');
  } else {
    $('[class^="visa-ui-sidepanel-panel"').addClass('visa-ui-state--hidden');
  }
};

window.activateAnimation = function(context, prop) {
  var sidepanel = $(context)
    .parent()
    .parent();
  var content = $(context)
    .parent()
    .parent()
    .siblings('.visa-ui-content');
  var grid = content.find('.visa-ui-grid');
  if (prop === 'open') {
    $(sidepanel).addClass('visa-ui-status--active');
    $(content).addClass('visa-ui-content--shrink');
    if ($(window).width() - grid[0].clientWidth - sidepanel[0].clientWidth < 0) {
      $(grid).addClass('visa-ui-grid-width--unset');
    }
  } else {
    $(sidepanel).removeClass('visa-ui-status--active');
    $(content).removeClass('visa-ui-content--shrink');
    $(grid).removeClass('visa-ui-grid-width--unset');
  }
};

$(document).ready(function() {
  var isSidePanelPage =
    window.location.href.indexOf('visa-ui-sidepanel') >= 0 ||
    window.location.href.indexOf('visa-ui-help') >= 0;

  if (isSidePanelPage) {
    Codenamic.add('sidepanel-usage-example');
    Codenamic.add('sidepanel-hidden-example');

    new window.SidePanel($('.visa-ui-sidepanel'));
  }
});

/*
//	visa-ui-slider
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

window.Slider = function(elem, updateCallback) {
  var self = this;
  this.nodeRef = $(elem).find('.visa-ui-slider-node');
  this.activeTrackRef = $(elem).find('.visa-ui-slider-track');
  this.labelRef = $(elem).find('.visa-ui-slider-label');
  this.labelRefValue = this.min;
  this.nodePosition = $(this.nodeRef).position();
  this.isCaptured = false;
  this.currentvalue = parseInt($(this.nodeRef).css('left'), 10);
  this.mouseZero = 1;
  this.mouseMax = $(elem).width();

  $(self.nodeRef).on('mousedown', function(e) {
    self.setActive(e);
    Codenamic.reprint();
    $(window).on('mousemove', function(f) {
      self.moveNode(f);
      if (updateCallback !== undefined && typeof updateCallback === 'function') {
        setTimeout(function() {
          updateCallback(self.labelRefValue);
        }, 10);
      }
      Codenamic.reprint();
    });
  });

  $(window).on('mouseup', function(e) {
    var flag = self.isCaptured;
    self.setInactive(e);
    if (flag) {
      Codenamic.reprint();
    }
    $(window).off('mousemove');
  });
};

window.Slider.prototype.moveNode = function(event) {
  var offset;
  var x;
  var paddingString;
  var padding;
  var nodeCenter;
  var newPos;
  var labelValue;
  if (this.isCaptured) {
    // removes blocking side effects
    event.preventDefault();
    offset = $(this.nodeRef.parent()).offset();
    x = event.pageX - offset.left;
    paddingString = $(this.nodeRef)
      .parent()
      .css('padding');
    padding = paddingString ? parseInt(paddingString, 10) : 0;
    nodeCenter = Math.ceil(parseInt($(this.nodeRef).css('width'), 10) / 2);
    newPos = x - (padding + nodeCenter);
    if (newPos < this.mouseMax && newPos > -1) {
      this.currentvalue = Math.ceil(newPos);
      $(this.nodeRef).css('left', newPos);
      $(this.activeTrackRef).css('width', newPos + nodeCenter);
      $(this.labelRef).css('left', newPos);
      labelValue = Math.ceil(newPos * 100 / this.mouseMax);
      this.labelRefValue = labelValue;
      if (labelValue === 0) {
        $(this.labelRef).html();
      } else {
        $(this.labelRef).text(labelValue);
      }
    }
  }
};

window.Slider.prototype.setActive = function(event) {
  // removes blocking side effects
  event.preventDefault();
  $(this.nodeRef).addClass('visa-ui-state--active');
  this.isCaptured = true;
};

window.Slider.prototype.setInactive = function(event) {
  // removes blocking side effects
  event.preventDefault();
  $(this.nodeRef).removeClass('visa-ui-state--active');
  this.isCaptured = false;
};

$(document).ready(function() {
  new window.Slider($('#slider-example .visa-ui-slider'));
  Codenamic.add('slider-example');
});

/*
//	visa-ui-stage
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

window.Stage = function(container) {
  var steps = container.find('.visa-ui-stage-step');
  var buttonPrev = container.find('.visa-ui-btn-text[data-action="previous"]');
  var buttonNext = container.find('.visa-ui-btn-text[data-action="next"]');
  var stages = steps.length;
  var current = 0;
  var maxStages = 9;

  var move = function() {
    steps.attr('class', 'visa-ui-stage-step');
    buttonPrev.attr('disabled', current === 0);
    buttonPrev.attr('aria-disabled', current === 0);
    buttonNext.attr('disabled', current === stages - 1);
    buttonNext.attr('aria-disabled', current === stages - 1);
    $(steps.get(current)).addClass(
      'visa-ui-state--complete-' + Math.floor(current / stages * maxStages)
    );
    Codenamic.reprint();
  };

  buttonPrev.on('click', function() {
    current -= 1;
    move();
  });

  buttonNext.on('click', function() {
    current += 1;
    move();
  });
};

$(document).ready(function() {
  new window.Stage($('#stage-example-container-1'));
  new window.Stage($('#stage-example-container-2'));

  Codenamic.add('stage-example-1');
  Codenamic.add('stage-example-2');
});

/*
//	visa-ui-status
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  Codenamic.add('status-example');

  $('.visa-ui-radio-group#button-gauge-status .visa-ui-radio-label').on('click', function() {
    var label = $(this).html();
    var type = label.toLowerCase();
    var statusExample = $('#status-example > [class^="visa-ui-status"]');
    var statusClass;

    switch (type) {
      case 'in progress':
        statusClass = 'progress';
        break;
      case 'completed':
        statusClass = 'completed';
        break;
      case 'approved':
        statusClass = 'approved';
        break;
      case 'not started':
      default:
        statusClass = 'default';
        break;
    }

    statusExample.attr('class', 'visa-ui-status--' + statusClass);
    statusExample.find('.visa-ui-status-label').html(label);
    Codenamic.reprint();
  });
});

/*
//  visa-ui-stepper
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  var stepper = $('.visa-ui-stepper');
  var steps = stepper.find('.visa-ui-stepper-step');
  var buttonPrev = $('.visa-ui-btn-text[data-action="previous-step"]');
  var buttonNext = $('.visa-ui-btn-text[data-action="next-step"]');
  var current = 0;
  var initialLeft;
  var initialTop;

  var updateSteps = function() {
    var s;
    for (s = 0; s < steps.length; s++) {
      if (s < current) {
        $(steps[s]).addClass('visa-ui-state--completed');
      } else if (s === current) {
        $(steps[s]).addClass('visa-ui-state--active');
      } else {
        $(steps[s]).removeClass('visa-ui-state--completed');
      }
    }
  };

  var moveBorder = function(step, first) {
    setTimeout(function() {
      var listItemLeft = step.offset().left;
      var listItemTop = step.offset().top;
      var borderTop = $('.visa-ui-stepper-border').offset().top;
      var borderLeft = $('.visa-ui-stepper-border').offset().left;
      var distanceToMoveLeft = listItemLeft - borderLeft;
      var distanceToMoveTop = listItemTop - borderTop;

      if (first) {
        initialTop = distanceToMoveTop;
        initialLeft = distanceToMoveLeft;

        $('.visa-ui-stepper-border').css({
          top: distanceToMoveTop,
          left: distanceToMoveLeft
        });
      } else {
        $('.visa-ui-stepper-border').css({
          top: initialTop,
          left: (initialLeft += distanceToMoveLeft)
        });
      }

      // keeps the state of all of the previous steps and changes it to complete
      $(steps)
        .removeClass('visa-ui-state--active')
        .removeClass('visa-ui-state--completed');
      updateSteps();
    }, 30);
  };

  var move = function(animated) {
    var step = $(steps.get(current));

    buttonPrev.attr('disabled', current === 0);
    buttonPrev.attr('aria-disabled', current === 0);
    buttonNext.attr('disabled', current === steps.length - 1);
    buttonNext.attr('aria-disabled', current === steps.length - 1);

    if (animated) {
      $('.visa-ui-stepper-border').addClass('visa-ui-stepper--animate');
      Codenamic.reprint();
    }

    setTimeout(function() {
      moveBorder(step);
    }, 100);

    if (animated) {
      setTimeout(function() {
        $('.visa-ui-stepper-border').removeClass('visa-ui-stepper--animate');
        Codenamic.reprint();
      }, 300);
    }

    Codenamic.reprint();
  };

  $(window).resize(function() {
    move();
  });

  buttonNext.on('click', function() {
    current += 1;
    move(true);
  });

  buttonPrev.on('click', function() {
    current -= 1;
    move(true);
  });

  if ($(steps.get(current)) !== undefined && $(steps.get(current)).offset() !== undefined) {
    moveBorder($(steps.get(current)), true);
  }

  Codenamic.add('stepper-example');
});

/*
//  visa-ui-toast
//  component logic
//
//  @author sacuna
*/

$(document).ready(function() {});

/*
//	visa-ui-toggle
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */

$(document).ready(function() {
  var toggleStatus = function(elem) {
    $(elem).toggleClass('visa-ui-state--active');
    Codenamic.reprint();
  };

  Codenamic.add('toggle-example');

  $('.visa-ui-toggle').on('click', function() {
    toggleStatus($(this));
  });

  $('.visa-ui-toggle .visa-ui-toggle-node').on('keyup', function(e) {
    if (e.which === 13) {
      toggleStatus($(this).parent());
    }
  });
});

/*
//  visa-ui-tooltip
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */
/* global Utils */

$(document).ready(function() {
  var showTooltip = function(element) {
    var id = $(element).attr('data-tooltip');
    var x = $(element).offset().left;
    var y = $(element).offset().top;
    var tooltip = '.visa-ui-tooltip' + id;
    var align = $(tooltip).attr('data-align');

    switch (align) {
      case 'right':
        y += Utils.getFullHeight($(element)) / 2 - Utils.getFullHeight(tooltip) / 2;
        x += Utils.getFullWidth($(element)) + 15;
        break;
      case 'bottom':
        y += Utils.getFullHeight($(element)) + 15;
        x += Utils.getFullWidth($(element)) / 2 - Utils.getFullWidth(tooltip) / 2;
        break;
      case 'left':
        y += Utils.getFullHeight($(element)) / 2 - Utils.getFullHeight(tooltip) / 2;
        x -= Utils.getFullWidth(tooltip) + 15;
        break;
      default:
      case 'top':
        y -= Utils.getFullHeight(tooltip) + 15;
        x += Utils.getFullWidth($(element)) / 2 - Utils.getFullWidth(tooltip) / 2;
        break;
    }

    $(tooltip)
      .addClass('visa-ui-state--show')
      .css({
        top: y,
        left: x
      });

    Codenamic.reprint();
  };

  var hideTooltip = function(element) {
    var id = $(element).attr('data-tooltip');
    $('.visa-ui-tooltip' + id).removeClass('visa-ui-state--show');
    Codenamic.reprint();
  };

  Codenamic.add('tooltip-example');

  $('[data-tooltip]')
    .on('mouseenter', function() {
      showTooltip(this);
    })
    .on('focus', function() {
      showTooltip(this);
    })
    .on('mouseleave', function() {
      hideTooltip(this);
    })
    .on('focusout', function() {
      hideTooltip(this);
    });

  $('.visa-ui-radio-group#tooltip-orientation-test .visa-ui-radio-label').on('click', function() {
    var orientation = $(this)
      .html()
      .toLowerCase();
    $('#tooltip-example .visa-ui-btn--label').html(orientation);
    $('#tooltip-example .visa-ui-tooltip').attr('data-align', orientation);
    Codenamic.reprint();
  });
});

/*
//  visa-ui-typography
//  component logic
//
//  @author sacuna
*/

$(document).ready(function() {});

/*
//	visa-ui-visabar
//  component logic
//
//  @author sacuna
*/

/* global Codenamic */
/* global Dropdown */

$(document).ready(function() {
  new Dropdown('.visa-ui-btn-link[data-dropdown="#visabar-user-menu"]');

  Codenamic.add('visabar-example');
  Codenamic.add('visabar-fixed');
  Codenamic.add('visabar-absolute');
  Codenamic.add('visabar-relative');

  $('#visabar-example .visa-ui-visabar--relative').on('click', function() {
    Codenamic.reprint();
  });
});
